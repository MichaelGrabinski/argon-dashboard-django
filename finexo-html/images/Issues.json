{"title": "Issues", "model_name": "o1-preview", "messages": [{"sender": "user", "content": "I need some help my page uses forms and other html in the projects for my tabs I have two tabs not work or showing information the main tab and budget tab:\r\n\r\nthey are pulled with this             <!-- Tab content for project details -->\r\n            <div class=\"tab-content\" id=\"projectDetailTabsContent-{{ project_info.project.id }}\">\r\n                <!-- Main Tab Content -->\r\n                <div class=\"tab-pane fade show active\" id=\"main-{{ project_info.project.id }}\" role=\"tabpanel\" aria-labelledby=\"main-tab-{{ project_info.project.id }}\">\r\n                    {% include 'home/project_main.html' with project=project_info.project %}\r\n                </div>\r\nand\r\n                <!-- Budget Tab Content -->\r\n                <div class=\"tab-pane fade\" id=\"budget-{{ project_info.project.id }}\" role=\"tabpanel\" aria-labelledby=\"budget-tab-{{ project_info.project.id }}\">\r\n                    {% include 'home/budget_page.html' with project=project_info.project %}\r\n                </div>\r\n\r\nI can see some buttons but they dont work and the info inside says its blank when its not, here is the html for those pages plus the forms.py and urls.py\r\n{% load static %}\r\n\r\n<h2>Main - {{ project.title }}</h2>\r\n\r\n<!-- Attachments Section -->\r\n<h3>Attachments</h3>\r\n<form method=\"post\" enctype=\"multipart/form-data\">\r\n    {% csrf_token %}\r\n    {{ attachment_form.as_p }}\r\n    <button type=\"submit\" name=\"add_attachment\" class=\"btn btn-primary\">Upload Attachment</button>\r\n</form>\r\n\r\n<!-- Display Attachment Form Errors -->\r\n{% if attachment_form.errors %}\r\n    <div class=\"alert alert-danger\">\r\n        {{ attachment_form.errors }}\r\n    </div>\r\n{% endif %}\r\n\r\n<ul>\r\n    {% for attachment in attachments %}\r\n    <li>\r\n        <a href=\"{{ attachment.file.url }}\">{{ attachment.file.name }}</a> (Uploaded by {{ attachment.uploaded_by.username }}, {{ attachment.uploaded_at|date:\"Y-m-d H:i\" }})\r\n    </li>\r\n    {% empty %}\r\n    <li>No attachments yet.</li>\r\n    {% endfor %}\r\n</ul>\r\n\r\n<!-- Notes Section -->\r\n<h3>Notes</h3>\r\n<form method=\"post\">\r\n    {% csrf_token %}\r\n    {{ note_form.as_p }}\r\n    <button type=\"submit\" name=\"add_note\" class=\"btn btn-primary\">Add Note</button>\r\n</form>\r\n\r\n<!-- Display Note Form Errors -->\r\n{% if note_form.errors %}\r\n    <div class=\"alert alert-danger\">\r\n        {{ note_form.errors }}\r\n    </div>\r\n{% endif %}\r\n\r\n<ul>\r\n    {% for note in notes %}\r\n    <li>\r\n        {{ note.content }} (Added by {{ note.created_by.username }}, {{ note.created_at|date:\"Y-m-d H:i\" }})\r\n    </li>\r\n    {% empty %}\r\n    <li>No notes yet.</li>\r\n    {% endfor %}\r\n</ul>\r\n{% load static %}\r\n\r\n<h2>Budget for {{ project.title }}</h2>\r\n<h3>Allotted Budget: ${{ project.allotted_budget }}</h3>\r\n<h3>Total Cost: ${{ total_cost }}</h3>\r\n<h3>Cost per Sq Ft: ${{ cost_per_sqft|floatformat:2 }}</h3>\r\n\r\n<!-- Materials Section -->\r\n<h4>Materials</h4>\r\n<form method=\"post\">\r\n    {% csrf_token %}\r\n    {{ material_form.as_p }}\r\n    <button type=\"submit\" name=\"add_material\" class=\"btn btn-primary\">Add Material</button>\r\n</form>\r\n\r\n<!-- Display Material Form Errors -->\r\n{% if material_form.errors %}\r\n    <div class=\"alert alert-danger\">\r\n        {{ material_form.errors }}\r\n    </div>\r\n{% endif %}\r\n\r\n<table class=\"table\">\r\n    <thead>\r\n        <tr>\r\n            <th>Category</th>\r\n            <th>Description</th>\r\n            <th>Unit Cost</th>\r\n            <th>Quantity</th>\r\n            <th>Total Cost</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        {% for material in materials %}\r\n        <tr>\r\n            <td>{{ material.category.name }}</td>\r\n            <td>{{ material.description }}</td>\r\n            <td>${{ material.unit_cost }}</td>\r\n            <td>{{ material.quantity }}</td>\r\n            <td>${{ material.total_cost }}</td>\r\n        </tr>\r\n        {% empty %}\r\n        <tr>\r\n            <td colspan=\"5\">No materials added yet.</td>\r\n        </tr>\r\n        {% endfor %}\r\n    </tbody>\r\n</table>\r\n\r\n<!-- Labor Section -->\r\n<h4>Labor</h4>\r\n<form method=\"post\">\r\n    {% csrf_token %}\r\n    {{ labor_form.as_p }}\r\n    <button type=\"submit\" name=\"add_labor\" class=\"btn btn-primary\">Add Labor Entry</button>\r\n</form>\r\n\r\n<!-- Display Labor Form Errors -->\r\n{% if labor_form.errors %}\r\n    <div class=\"alert alert-danger\">\r\n        {{ labor_form.errors }}\r\n    </div>\r\n{% endif %}\r\n\r\n<table class=\"table\">\r\n    <thead>\r\n        <tr>\r\n            <th>User</th>\r\n            <th>Date</th>\r\n            <th>Hours Worked</th>\r\n            <th>Pay Rate</th>\r\n            <th>Total Pay</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        {% for labor in labor_entries %}\r\n        <tr>\r\n            <td>{{ labor.user.username }}</td>\r\n            <td>{{ labor.date }}</td>\r\n            <td>{{ labor.hours_worked }}</td>\r\n            <td>${{ labor.pay_rate }}</td>\r\n            <td>${{ labor.total_pay }}</td>\r\n        </tr>\r\n        {% empty %}\r\n        <tr>\r\n            <td colspan=\"5\">No labor entries added yet.</td>\r\n        </tr>\r\n        {% endfor %}\r\n    </tbody>\r\n</table>\r\nfrom django import forms\r\nfrom django.contrib.auth.models import User \r\nfrom .models import (\r\n    Tool, Tag, Task, Comment, Attachment, Unit, Material,\r\n    LaborEntry, ProjectNote, ProjectAttachment, ReferenceMaterial,\r\n    Project, ProjectImage\r\n)\r\n\r\nclass ToolSearchForm(forms.Form):\r\n    search = forms.CharField(required=False, label='Search')\r\n    tag = forms.ModelChoiceField(queryset=Tag.objects.all(), required=False, label='Tag')\r\n\r\nclass TaskForm(forms.ModelForm):\r\n    unit = forms.ModelChoiceField(queryset=Unit.objects.all(), required=True, label=\"Unit\")\r\n\r\n    class Meta:\r\n        model = Task\r\n        fields = ['title', 'description', 'status', 'due_date', 'priority', 'unit']\r\n\r\n    def save(self, commit=True):\r\n        task = super().save(commit=False)\r\n        task.location = self.cleaned_data['unit'].location  # Set the location based on the selected unit\r\n        if commit:\r\n            task.save()\r\n        return task\r\n\r\nclass CommentForm(forms.ModelForm):\r\n    class Meta:\r\n        model = Comment\r\n        fields = ['content']\r\n\r\nclass AttachmentForm(forms.ModelForm):\r\n    class Meta:\r\n        model = Attachment\r\n        fields = ['file']\r\n\r\nclass AssignTaskForm(forms.Form):\r\n    user = forms.ModelChoiceField(queryset=User.objects.all(), required=True, label='Assign to')\r\n\r\nclass QuickTaskForm(forms.ModelForm):\r\n    class Meta:\r\n        model = Task\r\n        fields = [\r\n            'title', 'description', 'priority', 'category', 'hours',\r\n            'assigned_to', 'location', 'due_date', 'project', 'phase',\r\n            'parent_task', 'tags'\r\n        ]\r\n        widgets = {\r\n            'title': forms.TextInput(attrs={'value': 'New Task'}),\r\n            'description': forms.Textarea(attrs={'value': 'Description of the task'}),\r\n            'priority': forms.Select(),\r\n            'category': forms.TextInput(attrs={'value': 'General'}),\r\n            'hours': forms.NumberInput(attrs={'value': 1}),\r\n            'assigned_to': forms.Select(),\r\n            'location': forms.Select(),  # Use a dropdown for location\r\n            'due_date': forms.DateInput(attrs={'type': 'date'}),\r\n            'tags': forms.CheckboxSelectMultiple(),\r\n        }\r\n\r\nclass ReferenceMaterialForm(forms.ModelForm):\r\n    class Meta:\r\n        model = ReferenceMaterial\r\n        fields = ['project', 'type', 'content']\r\n\r\nclass ImportConversationForm(forms.Form):\r\n    conversations_file = forms.FileField(\r\n        label='Select a JSON file to import',\r\n        help_text='Max. 5 megabytes'\r\n    )\r\n\r\nclass StatementUploadForm(forms.Form):\r\n    project_id = forms.ModelChoiceField(queryset=Project.objects.all())\r\n    statement_file = forms.FileField(label='Select PDF Bank Statement')\r\n\r\nclass BankStatementUploadForm(forms.Form):\r\n    project = forms.ModelChoiceField(queryset=Project.objects.all())\r\n    bank_statement_file = forms.FileField(label='Bank Statement (PDF)')\r\n\r\n    def clean_bank_statement_file(self):\r\n        file = self.cleaned_data['bank_statement_file']\r\n        if not file.name.endswith('.pdf'):\r\n            raise forms.ValidationError('Please upload a PDF file.')\r\n        return file\r\n\r\nclass ProjectImageForm(forms.ModelForm):\r\n    class Meta:\r\n        model = ProjectImage\r\n        fields = ['image']\r\n\r\nclass MaterialForm(forms.ModelForm):\r\n    class Meta:\r\n        model = Material\r\n        fields = ['category', 'description', 'unit_cost', 'quantity']\r\n\r\nclass LaborEntryForm(forms.ModelForm):\r\n    class Meta:\r\n        model = LaborEntry\r\n        fields = ['user', 'hours_worked', 'pay_rate', 'date']\r\n\r\nclass ProjectNoteForm(forms.ModelForm):\r\n    class Meta:\r\n        model = ProjectNote\r\n        fields = ['content']\r\n\r\nclass ProjectAttachmentForm(forms.ModelForm):\r\n    class Meta:\r\n        model = ProjectAttachment\r\n        fields = ['file']\r\nfrom django.conf import settings\r\nfrom django.conf.urls.static import static\r\nfrom django.urls import path, re_path\r\nfrom apps.home import views\r\nfrom rest_framework.urlpatterns import format_suffix_patterns\r\n\r\n\r\nurlpatterns = [\r\n    # The default home page\r\n    path('', views.public_home, name='home'),  # Change this line to use public_home as the default page\r\n    # Original home page\r\n    path('original_home/', views.index, name='original_home'),  # Add this line to keep the original home page accessible\r\n    re_path(r'^data/(.*)$', views.data_list),\r\n    \r\n    \r\n    # Public Pages\r\n    path('public_home/', views.public_home, name='public_home'), \r\n    path('public_about/', views.public_about, name='public_about'),\r\n    path('public_services/', views.public_services, name='public_services'),\r\n    \r\n    \r\n    # Tool management\r\n    path('tools/', views.tool_list, name='tool_list'),  # Changed to 'tools/' to avoid conflict with home\r\n    path('tool/<int:pk>/', views.tool_detail, name='tool_detail'),\r\n    path('tasks_data/', views.tasks_data, name='tasks_data'),\r\n    \r\n    path('update_task_status/', views.update_task_status, name='update_task_status'),\r\n    path('update_task/', views.update_task, name='update_task'),\r\n    path('update_link/', views.update_link, name='update_link'),\r\n    path('add_task/', views.add_task, name='add_task'),\r\n    \r\n    path('properties/', views.properties_list, name='properties_list'),\r\n    path('properties/<int:property_pk>/', views.property_detail, name='property_detail'),\r\n    path('properties/<int:property_pk>/units/<int:unit_pk>/', views.unit_detail, name='unit_detail'),  # Update this line\r\n    \r\n    path('vehicles/', views.vehicle_overview, name='vehicle_overview'),\r\n    path('vehicles/<int:pk>/', views.vehicle_detail, name='vehicle_detail'),\r\n    \r\n    path('tasks/', views.task_list, name='task_list'),\r\n    path('tasks/<int:pk>/', views.task_detail, name='task_detail'),\r\n    path('tasks/create/', views.create_task, name='create_task'),\r\n    path('tasks/gantt/', views.gantt_chart, name='gantt_chart'),\r\n    path('tasks/quick_create/', views.create_quick_task, name='create_quick_task'),\r\n    \r\n    path('construction/', views.construction_hub, name='construction_hub'),\r\n    path('construction/project/<int:project_id>/', views.project_detail, name='project_detail'),\r\n    \r\n    path('projects/', views.other_hub, name='other_hub'),\r\n    path('projects/export/', views.export_projects, name='export_projects'),\r\n    path('projects/import/', views.import_projects, name='import_projects'),\r\n    path('projects/<int:project_id>/upload_image/', views.upload_project_image, name='upload_project_image'),\r\n    path('projects/<int:project_id>/budget/', views.budget_page, name='budget_page'),\r\n    path('projects/<int:project_id>/main/', views.project_main, name='project_main'),\r\n    #path('construction/project/<int:project_id>/', views.project_detail, name='project_detail'),\r\n    \r\n    path('game-studio/', views.game_studio_hub, name='game_studio_hub'),\r\n    path('game-studio/project/<int:project_id>/', views.game_project_detail, name='game_project_detail'),\r\n    path('budget-accounting/', views.budget_accounting_hub, name='budget_accounting_hub'),\r\n    path('budget-accounting/project/<int:project_id>/', views.budget_project_detail, name='budget_project_detail'),\r\n    path('upload-statement/', views.upload_statement, name='upload_statement'),\r\n    # Matches any HTML file\r\n \r\n    path('conversations/', views.conversation_list, name='conversation_list'),\r\n    path('conversations/new/', views.new_conversation, name='new_conversation'),\r\n    path('conversations/<int:conversation_id>/', views.conversation_detail, name='conversation_detail'), \r\n    path('conversation/<int:conversation_id>/delete/', views.delete_conversation, name='delete_conversation'),\r\n    path('conversation/<int:conversation_id>/clear/', views.clear_conversation, name='clear_conversation'),\r\n    path('message/<int:message_id>/delete/', views.delete_message, name='delete_message'),\r\n    path('conversation/export/', views.export_conversation, name='export_conversation'),\r\n    path('conversation/<int:conversation_id>/export/', views.export_conversation, name='export_conversation'),\r\n    path('conversation/import/', views.import_conversation, name='import_conversation'),\r\n    \r\n    re_path(r'^.*\\.*', views.pages, name='pages'),\r\n    \r\n]\r\n\r\nurlpatterns = format_suffix_patterns(urlpatterns)\r\n\r\nif settings.DEBUG:\r\n    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)\r\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)", "message_type": "text", "created_at": "2024-09-25T19:49:51.427435"}, {"sender": "assistant", "content": "It seems like the issue you're experiencing stems from the fact that the necessary context variables are not being passed to your included templates (`project_main.html` and `budget_page.html`). When you use the `{% include %}` tag and only pass the `project` variable, the included templates don't have access to other variables like `attachment_form`, `attachments`, `note_form`, `notes`, `material_form`, `materials`, `labor_form`, and `labor_entries`. \n\nAs a result, the forms and lists in these templates appear blank or don't function properly because they lack the data they require to render correctly.\n\n**Here's how you can fix this issue:**\n\n1. **Pass All Necessary Context Variables to the Included Templates**\n\n   You need to modify your `{% include %}` statements to pass all the necessary context variables. Here's how you can adjust your code:\n\n   ```django\n   <!-- Main Tab Content -->\n   <div class=\"tab-pane fade show active\" id=\"main-{{ project_info.project.id }}\" role=\"tabpanel\" aria-labelledby=\"main-tab-{{ project_info.project.id }}\">\n       {% include 'home/project_main.html' with \n           project=project_info.project \n           attachment_form=attachment_form \n           attachments=attachments \n           note_form=note_form \n           notes=notes %}\n   </div>\n\n   <!-- Budget Tab Content -->\n   <div class=\"tab-pane fade\" id=\"budget-{{ project_info.project.id }}\" role=\"tabpanel\" aria-labelledby=\"budget-tab-{{ project_info.project.id }}\">\n       {% include 'home/budget_page.html' with \n           project=project_info.project \n           total_cost=total_cost \n           cost_per_sqft=cost_per_sqft \n           material_form=material_form \n           materials=materials \n           labor_form=labor_form \n           labor_entries=labor_entries %}\n   </div>\n   ```\n\n   By explicitly passing all the variables that your included templates expect, you ensure that they have access to the data they need.\n\n2. **Ensure Views Provide All Necessary Context Variables**\n\n   Your views need to provide these variables in their context. Here's an example of how you might adjust your view functions:\n\n   ```python\n   # views.py\n   from django.shortcuts import render, get_object_or_404\n   from .forms import (\n       ProjectAttachmentForm, ProjectNoteForm, MaterialForm, LaborEntryForm\n   )\n   from .models import Project, ProjectAttachment, ProjectNote, Material, LaborEntry\n\n   def project_detail(request, project_id):\n       project = get_object_or_404(Project, id=project_id)\n\n       # Handle forms submissions\n       if request.method == 'POST':\n           if 'add_attachment' in request.POST:\n               attachment_form = ProjectAttachmentForm(request.POST, request.FILES)\n               if attachment_form.is_valid():\n                   attachment = attachment_form.save(commit=False)\n                   attachment.project = project\n                   attachment.uploaded_by = request.user\n                   attachment.save()\n           elif 'add_note' in request.POST:\n               note_form = ProjectNoteForm(request.POST)\n               if note_form.is_valid():\n                   note = note_form.save(commit=False)\n                   note.project = project\n                   note.created_by = request.user\n                   note.save()\n           elif 'add_material' in request.POST:\n               material_form = MaterialForm(request.POST)\n               if material_form.is_valid():\n                   material = material_form.save(commit=False)\n                   material.project = project\n                   material.save()\n           elif 'add_labor' in request.POST:\n               labor_form = LaborEntryForm(request.POST)\n               if labor_form.is_valid():\n                   labor = labor_form.save(commit=False)\n                   labor.project = project\n                   labor.save()\n       else:\n           attachment_form = ProjectAttachmentForm()\n           note_form = ProjectNoteForm()\n           material_form = MaterialForm()\n           labor_form = LaborEntryForm()\n\n       # Get data for templates\n       attachments = ProjectAttachment.objects.filter(project=project)\n       notes = ProjectNote.objects.filter(project=project)\n       materials = Material.objects.filter(project=project)\n       labor_entries = LaborEntry.objects.filter(project=project)\n\n       # Calculate total cost and cost per square foot\n       total_cost = sum(material.total_cost for material in materials) + sum(labor.total_pay for labor in labor_entries)\n       cost_per_sqft = total_cost / project.square_footage if project.square_footage else 0\n\n       context = {\n           'project': project,\n           'attachment_form': attachment_form,\n           'attachments': attachments,\n           'note_form': note_form,\n           'notes': notes,\n           'material_form': material_form,\n           'materials': materials,\n           'labor_form': labor_form,\n           'labor_entries': labor_entries,\n           'total_cost': total_cost,\n           'cost_per_sqft': cost_per_sqft,\n       }\n\n       return render(request, 'home/project_detail.html', context)\n   ```\n\n   Make sure that your view function populates all the necessary context variables and that they are correctly associated with the project in question.\n\n3. **Adjust URLs if Necessary**\n\n   Ensure that your URLs are set up to handle the project detail view correctly. It looks like you have:\n\n   ```python\n   path('construction/project/<int:project_id>/', views.project_detail, name='project_detail'),\n   ```\n\n   This should match the path you're using to render the project detail page.\n\n4. **Check Your Form Handling in Templates**\n\n   Since you're using multiple forms in a single view, make sure your forms in the template are set up to distinguish between them when submitted. You've done this by naming your submit buttons differently (`name=\"add_attachment\"`, `name=\"add_note\"`, etc.).\n\n5. **Use Different Form Names to Avoid Conflicts**\n\n   In your forms, ensure that each one has a unique submit button name, so your view can determine which form was submitted:\n\n   ```django\n   <!-- In project_main.html -->\n   <form method=\"post\" enctype=\"multipart/form-data\">\n       {% csrf_token %}\n       {{ attachment_form.as_p }}\n       <button type=\"submit\" name=\"add_attachment\" class=\"btn btn-primary\">Upload Attachment</button>\n   </form>\n\n   <form method=\"post\">\n       {% csrf_token %}\n       {{ note_form.as_p }}\n       <button type=\"submit\" name=\"add_note\" class=\"btn btn-primary\">Add Note</button>\n   </form>\n\n   <!-- In budget_page.html -->\n   <form method=\"post\">\n       {% csrf_token %}\n       {{ material_form.as_p }}\n       <button type=\"submit\" name=\"add_material\" class=\"btn btn-primary\">Add Material</button>\n   </form>\n\n   <form method=\"post\">\n       {% csrf_token %}\n       {{ labor_form.as_p }}\n       <button type=\"submit\" name=\"add_labor\" class=\"btn btn-primary\">Add Labor Entry</button>\n   </form>\n   ```\n\n6. **Test Your Changes**\n\n   After making these changes, test your application to ensure that the forms render correctly, and the data displays as expected.\n\n**Summary:**\n\n- Pass all necessary context variables to the included templates using the `{% include 'template.html' with var=value %}` syntax.\n- Ensure your view functions provide these variables in the context.\n- Use unique names for your form submit buttons to handle multiple forms in a single view.\n- Test thoroughly to confirm that the forms and data display correctly.\n\nBy ensuring that all required variables are passed to your templates, your tabs should display the correct information, and your forms should function as intended.", "message_type": "text", "created_at": "2024-09-25T19:50:37.820857"}, {"sender": "user", "content": "here let me also show you the views.py and whole page where it suppose to be at:\r\n\r\n# -*- encoding: utf-8 -*-\r\nfrom django import template\r\nfrom django.contrib.auth.decorators import login_required\r\nfrom django.http import HttpResponse, HttpResponseRedirect\r\nfrom django.template import loader\r\nfrom django.urls import reverse\r\nfrom django.shortcuts import render, get_object_or_404, redirect \r\nfrom .forms import ToolSearchForm\r\nfrom apps.home.models import Tool, Material, TaskLink, Profile, MaintenanceRecord, Property, Unit, Vehicle, VehicleImage, Repair, MaintenanceHistory, ScheduledMaintenance, TagHouse, Location, PropertyLocation, PropertyInfo\r\nfrom django.db.models import Q\r\nfrom apps.home.models import Task, Attachment, Comment, ActivityLog, Project, Note, Document, ReferenceMaterial, GameProject, Task, Budget, Expense, FinancialReport, ProjectPhase, ReferenceMaterial, ProjectDocument\r\nfrom .forms import TaskForm, CommentForm, AttachmentForm, AssignTaskForm, QuickTaskForm, ProjectImageForm, MaterialForm, LaborEntryForm, ProjectNoteForm,ProjectAttachmentForm\r\nfrom django.contrib.auth.models import User\r\nfrom django import forms\r\nfrom .forms import ReferenceMaterialForm\r\nfrom django.shortcuts import render\r\nfrom django.contrib.auth.decorators import login_required\r\nfrom django.contrib.auth.models import User\r\nfrom .models import Task, Tool, MaintenanceRecord\r\nfrom .metrics import get_project_progress, get_task_status_distribution, get_budget_vs_actual_spending, get_expense_breakdown\r\nfrom django.db.models import Count, Sum, F\r\nfrom .serializers import TaskSerializer\r\nfrom rest_framework.decorators import api_view\r\nfrom rest_framework.response import Response\r\nfrom django.http import JsonResponse\r\nfrom django.views.decorators.csrf import csrf_exempt\r\nfrom datetime import datetime\r\nfrom django.shortcuts import render, redirect, get_object_or_404\r\nfrom .models import Conversation, Message\r\nfrom django.contrib.auth.decorators import login_required\r\nfrom openai import OpenAI\r\nfrom django.template import Library\r\n#from apps.home.templatetags import markdown_extras\r\nimport base64\r\nfrom django.http import JsonResponse\r\nfrom django.views.decorators.http import require_POST\r\nfrom django.conf import settings\r\nimport openai\r\nimport io\r\nfrom openai import OpenAIError\r\nfrom .models import Conversation, Message\r\nimport json\r\nfrom .forms import ImportConversationForm\r\nfrom django.shortcuts import render, redirect\r\nfrom django.contrib.auth.decorators import login_required, user_passes_test\r\nfrom pdfminer.high_level import extract_text\r\nimport re\r\nfrom datetime import datetime\r\n\r\ndef is_michael(user):\r\n    return user.username == 'Michael'\r\n\r\n\r\n@login_required(login_url=\"/login/\")\r\ndef index(request):\r\n    # Metrics for construction projects\r\n    construction_projects = Project.objects.filter(project_type='construction')\r\n    construction_project_metrics = []\r\n    for project in construction_projects:\r\n        progress = get_project_progress(project)\r\n        remaining_progress = 100 - progress\r\n        task_status_distribution = get_task_status_distribution(project)\r\n        budget_vs_spending = get_budget_vs_actual_spending(project)\r\n        expense_breakdown = get_expense_breakdown(project)\r\n        construction_project_metrics.append({\r\n            'project': project,\r\n            'progress': progress,\r\n            'remaining_progress': remaining_progress,\r\n            'task_status_distribution': task_status_distribution,\r\n            'budget_vs_spending': budget_vs_spending,\r\n            'expense_breakdown': expense_breakdown,\r\n        })\r\n\r\n    # Metrics for game studio projects\r\n    game_projects = Project.objects.filter(project_type='game')\r\n    game_project_metrics = []\r\n    for project in game_projects:\r\n        progress = get_project_progress(project)\r\n        remaining_progress = 100 - progress\r\n        task_status_distribution = get_task_status_distribution(project)\r\n        game_project_metrics.append({\r\n            'project': project,\r\n            'progress': progress,\r\n            'remaining_progress': remaining_progress,\r\n            'task_status_distribution': task_status_distribution,\r\n        })\r\n\r\n    context = {\r\n        'total_open_tickets': Task.objects.filter(status='open').count(),\r\n        'tickets_assigned_to_you': Task.objects.filter(assigned_to=request.user).count(),\r\n        'total_tools': Tool.objects.count(),\r\n        'total_maintenance_records': MaintenanceRecord.objects.count(),\r\n        'total_users': User.objects.count(),\r\n        'construction_project_metrics': construction_project_metrics,\r\n        'game_project_metrics': game_project_metrics,\r\n    }\r\n\r\n    return render(request, 'home/index.html', context)\r\n\r\n\r\n@login_required(login_url=\"/login/\")\r\ndef pages(request):\r\n    context = {}\r\n    # All resource paths end in .html.\r\n    # Pick out the html file name from the url. And load that template.\r\n    try:\r\n\r\n        load_template = request.path.split('/')[-1]\r\n\r\n        if load_template == 'admin':\r\n            return HttpResponseRedirect(reverse('admin:index'))\r\n        context['segment'] = load_template\r\n\r\n        html_template = loader.get_template('home/' + load_template)\r\n        return HttpResponse(html_template.render(context, request))\r\n\r\n    except template.TemplateDoesNotExist:\r\n\r\n        html_template = loader.get_template('home/page-404.html')\r\n        return HttpResponse(html_template.render(context, request))\r\n\r\n    except:\r\n        html_template = loader.get_template('home/page-500.html')\r\n        return HttpResponse(html_template.render(context, request))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfrom django.contrib.auth.models import User\r\n\r\n@login_required(login_url=\"/login/\")\r\ndef profile_view(request):\r\n    try:\r\n        user = User.objects.get(username='mikey')\r\n        profile = get_object_or_404(Profile, user=user)\r\n        print(f\"Profile: {profile}\")  # Debugging line\r\n        print(f\"About Me: {profile.about_me}\")  # Debugging line\r\n        print(f\"Profile Picture URL: {profile.profile_picture.url if profile.profile_picture else 'No profile picture'}\")  # Debugging line\r\n    except User.DoesNotExist:\r\n        print(\"User 'mikey' does not exist\")\r\n        return HttpResponse(\"User 'mikey' does not exist.\", status=404)\r\n    except Profile.DoesNotExist:\r\n        print(\"Profile does not exist for the user 'mikey'\")\r\n        return HttpResponse(\"Profile does not exist for the user 'mikey'.\", status=404)\r\n    except Exception as e:\r\n        print(f\"An unexpected error occurred: {e}\")\r\n        return HttpResponse(\"An unexpected error occurred.\", status=500)\r\n\r\n    context = {\r\n        'profile': profile,\r\n        'user': user\r\n    }\r\n    print(f\"Context: {context}\")  # Debugging line\r\n    return render(request, 'home/profile.html', context)\r\n    \r\n    \r\n\r\n\r\ndef tool_list(request):\r\n    form = ToolSearchForm(request.GET)\r\n    query = request.GET.get('search', '')\r\n    tag = request.GET.get('tag', None)\r\n\r\n    tools = Tool.objects.all()\r\n    if query:\r\n        tools = tools.filter(Q(name__icontains=query) | Q(description__icontains=query))\r\n    if tag:\r\n        tools = tools.filter(tags__id=tag)\r\n\r\n    records = MaintenanceRecord.objects.all()\r\n    if query:\r\n        records = records.filter(Q(tool__name__icontains=query) | Q(description__icontains=query))\r\n    if tag:\r\n        records = records.filter(tool__tags__id=tag)\r\n\r\n    context = {\r\n        'form': form,\r\n        'tools': tools,\r\n        'records': records,\r\n        'query': query,\r\n        'tag': tag,\r\n    }\r\n    return render(request, 'home/tools.html', context)\r\n    \r\n    \r\ndef tool_detail(request, pk):\r\n    tool = get_object_or_404(Tool, pk=pk)\r\n    maintenance_records = tool.maintenance_records.all()\r\n    context = {\r\n        'tool': tool,\r\n        'maintenance_records': maintenance_records,\r\n    }\r\n    return render(request, 'home/tool_detail.html', context)\r\n    \r\n    \r\ndef vehicle_overview(request):\r\n    vehicles = Vehicle.objects.all()\r\n    for vehicle in vehicles:\r\n        vehicle.tickets = Task.objects.filter(category=vehicle.model, status='open')  # Using the model as the category identifier\r\n       # vehicle.tickets = Task.objects.filter(category=vehicle.model, status='open')  # Using the model as the category identifier\r\n       #open_tickets = Task.objects.filter(location=unit.location, status='open')  # Update this line\r\n\r\n    context = {\r\n        'vehicles': vehicles,\r\n    }\r\n    return render(request, 'home/vehicle_overview.html', context)\r\n    \r\n\r\ndef vehicle_detail(request, pk):\r\n    vehicle = get_object_or_404(Vehicle, pk=pk)\r\n    images = vehicle.images.all()\r\n    current_repairs = vehicle.repairs.filter(status__in=['in_progress', 'pending_parts'])\r\n    maintenance_history = vehicle.maintenance_history.all()\r\n    scheduled_maintenance = vehicle.scheduled_maintenance.all()\r\n    context = {\r\n        'vehicle': vehicle,\r\n        'images': images,\r\n        'current_repairs': current_repairs,\r\n        'maintenance_history': maintenance_history,\r\n        'scheduled_maintenance': scheduled_maintenance,\r\n    }\r\n    return render(request, 'home/vehicle_detail.html', context)\r\n    \r\ndef properties_list(request):\r\n    properties = Property.objects.all()\r\n    for property in properties:\r\n        property.open_tickets_count = Task.objects.filter(tags__name=property.name, status='open').count()\r\n    property_locations = PropertyLocation.objects.all()\r\n    context = {\r\n        'properties': properties,\r\n        'property_locations': property_locations,\r\n    }\r\n    return render(request, 'home/properties_list.html', context)\r\n\r\ndef property_detail(request, pk):\r\n    property = get_object_or_404(Property, pk=pk)\r\n    units = property.units.all()\r\n    property_info = PropertyInfo.objects.get_or_create(property=property)[0]\r\n    property_location = PropertyLocation.objects.get_or_create(property=property)[0]\r\n    context = {\r\n        'property': property,\r\n        'units': units,\r\n        'property_info': property_info,\r\n        'property_location': property_location,\r\n    }\r\n    return render(request, 'home/property_detail.html', context)\r\n\r\ndef unit_detail(request, property_pk, unit_pk):\r\n    property = get_object_or_404(Property, pk=property_pk)\r\n    unit = get_object_or_404(Unit, pk=unit_pk, property=property)\r\n    documents = unit.documents.all()\r\n    maintenance_records = MaintenanceRecord.objects.filter(location=unit.unit_number)\r\n    open_repairs = unit.open_repairs.all()\r\n    rent_payments = unit.rent_payments.all()\r\n    open_tickets = Task.objects.filter(location=unit.location, status='open')  # Update this line\r\n\r\n    # Debugging\r\n    print(documents)\r\n\r\n    context = {\r\n        'property': property,\r\n        'unit': unit,\r\n        'documents': documents,\r\n        'maintenance_records': maintenance_records,\r\n        'open_repairs': open_repairs,\r\n        'rent_payments': rent_payments,\r\n        'open_tickets': open_tickets,\r\n    }\r\n    return render(request, 'home/unit_detail.html', context)\r\n\r\n@login_required(login_url=\"/login/\")\r\ndef task_list(request):\r\n    query = request.GET.get('search', '')\r\n    status_filter = request.GET.get('status', '')\r\n    location_filter = request.GET.get('location', '')\r\n    category_filter = request.GET.get('category', '')  # Get category filter from request\r\n\r\n    tasks = Task.objects.all()\r\n\r\n    if query:\r\n        tasks = tasks.filter(Q(title__icontains=query) | Q(description__icontains(query)))\r\n    if status_filter:\r\n        tasks = tasks.filter(status=status_filter)\r\n    if location_filter:\r\n        tasks = tasks.filter(location__name__icontains(location_filter))\r\n    if category_filter:\r\n        tasks = tasks.filter(category__icontains(category_filter))  # Filter by category\r\n\r\n    open_tasks = tasks.filter(status='open')\r\n    assigned_tasks = tasks.filter(assigned_to=request.user)\r\n    closed_tasks = tasks.filter(status='closed')\r\n    locations = Location.objects.all()\r\n    categories = Task.objects.values_list('category', flat=True).distinct()  # Get distinct categories\r\n\r\n    context = {\r\n        'open_tasks': open_tasks,\r\n        'assigned_tasks': assigned_tasks,\r\n        'closed_tasks': closed_tasks,\r\n        'query': query,\r\n        'status_filter': status_filter,\r\n        'location_filter': location_filter,\r\n        'category_filter': category_filter,  # Pass category filter to context\r\n        'locations': locations,\r\n        'categories': categories,  # Pass categories to context\r\n        'assign_task_form': AssignTaskForm(),\r\n        'tasks': tasks  # Ensure tasks are passed to the template\r\n    }\r\n    return render(request, 'home/task_list.html', context)\r\n\r\n    \r\ndef task_detail(request, pk):\r\n    task = get_object_or_404(Task, pk=pk)\r\n    comments = task.comments.all()\r\n    attachments = task.attachments.all()\r\n    activity_logs = task.activity_logs.all()\r\n\r\n    if request.method == 'POST':\r\n        if 'comment' in request.POST:\r\n            comment_form = CommentForm(request.POST)\r\n            if comment_form.is_valid():\r\n                comment = comment_form.save(commit=False)\r\n                comment.task = task\r\n                comment.user = request.user\r\n                comment.save()\r\n                ActivityLog.objects.create(task=task, user=request.user, action=\"Added a comment\")\r\n                return redirect('task_detail', pk=task.pk)\r\n        elif 'attachment' in request.POST:\r\n            attachment_form = AttachmentForm(request.POST, request.FILES)\r\n            if attachment_form.is_valid():\r\n                attachment = attachment_form.save(commit=False)\r\n                attachment.task = task\r\n                attachment.save()\r\n                ActivityLog.objects.create(task=task, user=request.user, action=\"Added an attachment\")\r\n                return redirect('task_detail', pk=task.pk)\r\n        elif 'assign_task' in request.POST:\r\n            assign_task_form = AssignTaskForm(request.POST)\r\n            if assign_task_form.is_valid():\r\n                task.assigned_to = assign_task_form.cleaned_data['user']\r\n                task.save()\r\n                ActivityLog.objects.create(task=task, user=request.user, action=f\"Assigned the task to {task.assigned_to}\")\r\n                return redirect('task_detail', pk=task.pk)\r\n        elif 'update_status' in request.POST:\r\n            task.status = request.POST.get('status')\r\n            task.save()\r\n            ActivityLog.objects.create(task=task, user=request.user, action=f\"Updated status to {task.get_status_display()}\")\r\n            return redirect('task_detail', pk=task.pk)\r\n    \r\n    comment_form = CommentForm()\r\n    attachment_form = AttachmentForm()\r\n    assign_task_form = AssignTaskForm()\r\n    \r\n    context = {\r\n        'task': task,\r\n        'comments': comments,\r\n        'attachments': attachments,\r\n        'activity_logs': activity_logs,\r\n        'comment_form': comment_form,\r\n        'attachment_form': attachment_form,\r\n        'assign_task_form': assign_task_form,\r\n    }\r\n    return render(request, 'home/task_detail.html', context)\r\n\r\ndef create_task(request):\r\n    if request.method == 'POST':\r\n        form = TaskForm(request.POST)\r\n        if form.is_valid():\r\n            task = form.save(commit=False)\r\n            task.created_by = request.user\r\n            task.save()\r\n            ActivityLog.objects.create(task=task, user=request.user, action=\"Created the task\")\r\n            return redirect('task_list')\r\n    else:\r\n        form = TaskForm()\r\n    \r\n    context = {\r\n        'form': form,\r\n    }\r\n    return render(request, 'home/create_task.html', context)\r\n\r\n\r\n@login_required\r\ndef create_quick_task(request):\r\n    if request.method == 'POST':\r\n        form = QuickTaskForm(request.POST)\r\n        if form.is_valid():\r\n            task = form.save(commit=False)\r\n            task.created_by = request.user\r\n            task.status = 'open'\r\n            task.save()\r\n            form.save_m2m()  # Save many-to-many relationships (e.g., tags)\r\n            ActivityLog.objects.create(task=task, user=request.user, action=\"Created the task via quick widget\")\r\n            return redirect('task_list')\r\n    else:\r\n        form = QuickTaskForm()\r\n    \r\n    context = {\r\n        'form': form,\r\n    }\r\n    return render(request, 'home/quick_task_widget.html', context)\r\n    \r\ndef gantt_chart(request):\r\n    tasks = Task.objects.all()\r\n    context = {\r\n        'tasks': tasks,\r\n    }\r\n    return render(request, 'home/gantt_chart.html', context)\r\n    \r\ndef construction_hub(request):\r\n    # Set default project_type to 'construction'\r\n    project_type = request.GET.get('project_type', 'construction')\r\n    \r\n    # Filter projects by the specified or default project type\r\n    projects = Project.objects.filter(project_type=project_type)\r\n\r\n    if request.method == 'POST':\r\n        if 'document' in request.FILES:\r\n            project_id = request.POST.get('project_id')\r\n            try:\r\n                project = get_object_or_404(Project, pk=project_id)\r\n            except Project.DoesNotExist:\r\n                return render(request, 'home/hub.html', {'error': 'Project not found', 'projects': projects})\r\n            file = request.FILES['document']\r\n            is_model = request.POST.get('is_model', 'off') == 'on'\r\n            ProjectDocument.objects.create(project=project, file=file, is_model=is_model)\r\n            return HttpResponseRedirect(reverse('construction_hub') + f'?project_type={project_type}')\r\n        elif 'file' in request.FILES:\r\n            form = ReferenceMaterialForm(request.POST, request.FILES)\r\n            if form.is_valid():\r\n                reference_material = form.save(commit=False)\r\n                project_id = form.cleaned_data['project'].id\r\n                reference_material.project = get_object_or_404(Project, pk=project_id)\r\n                reference_material.save()\r\n                return HttpResponseRedirect(reverse('construction_hub') + f'?project_type={project_type}')\r\n            else:\r\n                return render(request, 'home/hub.html', {'error': 'Invalid form submission', 'projects': projects})\r\n\r\n    reference_form = ReferenceMaterialForm()\r\n    project_data = []\r\n    for project in projects:\r\n        phases = project.phases.all()\r\n        phase_data = []\r\n        total_hours = 0\r\n        completed_hours = 0\r\n        for phase in phases:\r\n            tasks = phase.tasks.filter(parent_task__isnull=True)\r\n            total_phase_tasks = phase.tasks.count()\r\n            completed_phase_tasks = phase.tasks.filter(status='closed').count()\r\n            phase_completion_percentage = (completed_phase_tasks / total_phase_tasks) * 100 if total_phase_tasks > 0 else 0\r\n            phase_data.append({\r\n                'phase': phase,\r\n                'tasks': tasks,\r\n                'completion_percentage': phase_completion_percentage\r\n            })\r\n            for task in phase.tasks.all():\r\n                if task.hours:\r\n                    total_hours += task.hours\r\n                    if task.status == 'closed':\r\n                        completed_hours += task.hours\r\n        remaining_hours = total_hours - completed_hours\r\n        completion_percentage = (completed_hours / total_hours) * 100 if total_hours > 0 else 0\r\n        project_data.append({\r\n            'project': project,\r\n            'phases': phase_data,\r\n            'total_hours': total_hours,\r\n            'completed_hours': completed_hours,\r\n            'remaining_hours': remaining_hours,\r\n            'completion_percentage': completion_percentage\r\n        })\r\n\r\n    return render(request, 'home/hub.html', {\r\n        'project_data': project_data,\r\n        'reference_form': reference_form,\r\n        'project_type': project_type  # Pass the project_type to the template\r\n    })\r\n    \r\ndef project_detail(request, project_id):\r\n    project = get_object_or_404(Project, pk=project_id)\r\n    notes = project.notes.all()\r\n    documents = project.documents.all()\r\n    tasks = project.tasks.all()\r\n    references = project.references.all()\r\n\r\n    if request.method == 'POST':\r\n        if 'document' in request.FILES:\r\n            file = request.FILES['document']\r\n            is_model = request.POST.get('is_model', 'off') == 'on'\r\n            ProjectDocument.objects.create(project=project, file=file, is_model=is_model)\r\n            return HttpResponseRedirect(reverse('project_detail', args=[project_id]))\r\n\r\n    return render(request, 'home/project_detail.html', {\r\n        'project': project,\r\n        'notes': notes,\r\n        'documents': documents,\r\n        'tasks': tasks,\r\n        'references': references,\r\n    })\r\n    \r\n    \r\ndef game_studio_hub(request):\r\n        # Set default project_type to 'construction'\r\n    project_type = request.GET.get('project_type', 'game')\r\n    \r\n    # Filter projects by the specified or default project type\r\n    projects = Project.objects.filter(project_type=project_type)\r\n\r\n    if request.method == 'POST':\r\n        if 'document' in request.FILES:\r\n            project_id = request.POST.get('project_id')\r\n            try:\r\n                project = get_object_or_404(Project, pk=project_id)\r\n            except Project.DoesNotExist:\r\n                return render(request, 'game_studio.html', {'error': 'Project not found', 'projects': projects})\r\n            file = request.FILES['document']\r\n            is_model = request.POST.get('is_model', 'off') == 'on'\r\n            ProjectDocument.objects.create(project=project, file=file, is_model=is_model)\r\n            return HttpResponseRedirect(reverse('game_hub') + f'?project_type={project_type}')\r\n        elif 'file' in request.FILES:\r\n            form = ReferenceMaterialForm(request.POST, request.FILES)\r\n            if form.is_valid():\r\n                reference_material = form.save(commit=False)\r\n                project_id = form.cleaned_data['project'].id\r\n                reference_material.project = get_object_or_404(Project, pk=project_id)\r\n                reference_material.save()\r\n                return HttpResponseRedirect(reverse('game_hub') + f'?project_type={project_type}')\r\n            else:\r\n                return render(request, 'home/game_studio.html', {'error': 'Invalid form submission', 'projects': projects})\r\n\r\n    reference_form = ReferenceMaterialForm()\r\n    project_data = []\r\n    for project in projects:\r\n        phases = project.phases.all()\r\n        phase_data = []\r\n        total_hours = 0\r\n        completed_hours = 0\r\n        for phase in phases:\r\n            tasks = phase.tasks.filter(parent_task__isnull=True)\r\n            total_phase_tasks = phase.tasks.count()\r\n            completed_phase_tasks = phase.tasks.filter(status='closed').count()\r\n            phase_completion_percentage = (completed_phase_tasks / total_phase_tasks) * 100 if total_phase_tasks > 0 else 0\r\n            phase_data.append({\r\n                'phase': phase,\r\n                'tasks': tasks,\r\n                'completion_percentage': phase_completion_percentage\r\n            })\r\n            for task in phase.tasks.all():\r\n                if task.hours:\r\n                    total_hours += task.hours\r\n                    if task.status == 'closed':\r\n                        completed_hours += task.hours\r\n        remaining_hours = total_hours - completed_hours\r\n        completion_percentage = (completed_hours / total_hours) * 100 if total_hours > 0 else 0\r\n        project_data.append({\r\n            'project': project,\r\n            'phases': phase_data,\r\n            'total_hours': total_hours,\r\n            'completed_hours': completed_hours,\r\n            'remaining_hours': remaining_hours,\r\n            'completion_percentage': completion_percentage\r\n        })\r\n\r\n    return render(request, 'home/game_studio.html', {\r\n        'project_data': project_data,\r\n        'reference_form': reference_form,\r\n        'project_type': project_type  # Pass the project_type to the template\r\n    })\r\n\r\ndef game_project_detail(request, project_id):\r\n    project = get_object_or_404(GameProject, pk=project_id)\r\n    tasks = Task.objects.filter(project=project)\r\n    return render(request, 'home/game_studio_detail.html', {\r\n        'project': project,\r\n        'tasks': tasks,\r\n    })\r\n\r\n\r\n@login_required\r\n@user_passes_test(is_michael)\r\ndef budget_accounting_hub(request):\r\n    projects = Project.objects.all()\r\n    return render(request, 'home/budget_accounting.html', {'projects': projects})\r\n\r\n@login_required\r\n@user_passes_test(is_michael)\r\ndef budget_project_detail(request, project_id):\r\n    project = get_object_or_404(Project, pk=project_id)\r\n    budgets = project.budgets.all()\r\n    expenses = project.expenses.all()\r\n    reports = project.financial_reports.all()\r\n    return render(request, 'home/budget_accounting_detail.html', {\r\n        'project': project,\r\n        'budgets': budgets,\r\n        'expenses': expenses,\r\n        'reports': reports,\r\n    })\r\n    \r\nfrom django.shortcuts import render, redirect\r\nfrom django.contrib.auth.decorators import login_required, user_passes_test\r\nfrom .models import Transaction, Project\r\nfrom .forms import StatementUploadForm\r\nfrom .parsers import parse_bank_statement_pdf\r\n\r\ndef is_michael(user):\r\n    return user.username == 'Michael'\r\n\r\n@login_required\r\n@user_passes_test(is_michael)\r\ndef upload_statement(request):\r\n    if request.method == 'POST':\r\n        form = StatementUploadForm(request.POST, request.FILES)\r\n        if form.is_valid():\r\n            file = request.FILES['statement_file']\r\n            transactions = parse_bank_statement_pdf(file)\r\n            # Assuming transactions relate to a specific project\r\n            project = Project.objects.get(id=form.cleaned_data['project_id'])\r\n            for transaction in transactions:\r\n                Transaction.objects.create(\r\n                    project=project,\r\n                    date=transaction['date'],\r\n                    description=transaction['description'],\r\n                    amount=transaction['amount'],\r\n                    # Add other fields if necessary\r\n                )\r\n            return redirect('budget_project_detail', project_id=project.id)\r\n    else:\r\n        form = StatementUploadForm()\r\n    return render(request, 'home/upload_statement.html', {'form': form})\r\n\r\n\r\ndef parse_bank_statement_pdf(file):\r\n    text = extract_text(file)\r\n    transactions = []\r\n\r\n    # Adjust the regex pattern based on your bank statement's format\r\n    pattern = re.compile(r'(\\d{2}/\\d{2}/\\d{4})\\s+([\\w\\s]+)\\s+(-?\\d+[\\.,]\\d{2})')\r\n    for match in pattern.finditer(text):\r\n        date_str = match.group(1)\r\n        description = match.group(2).strip()\r\n        amount_str = match.group(3).replace(',', '.')\r\n\r\n        date = datetime.strptime(date_str, '%d/%m/%Y').date()\r\n        amount = float(amount_str)\r\n\r\n        transactions.append({\r\n            'date': date,\r\n            'description': description,\r\n            'amount': amount,\r\n            'category': 'Imported Bank Statement',\r\n        })\r\n\r\n    return transactions\r\n    \r\n    \r\ndef get_project_progress(project, is_game_project=False):\r\n    if is_game_project:\r\n        total_tasks = Task.objects.filter(game_project=project).count()\r\n        completed_tasks = Task.objects.filter(game_project=project, status='completed').count()\r\n    else:\r\n        total_tasks = Task.objects.filter(project=project).count()\r\n        completed_tasks = Task.objects.filter(project=project, status='completed').count()\r\n    progress = (completed_tasks / total_tasks) * 100 if total_tasks > 0 else 0\r\n    return progress\r\n\r\ndef get_task_status_distribution(project, is_game_project=False):\r\n    if is_game_project:\r\n        status_distribution = Task.objects.filter(game_project=project).values('status').annotate(count=Count('status'))\r\n    else:\r\n        status_distribution = Task.objects.filter(project=project).values('status').annotate(count=Count('status'))\r\n    return status_distribution\r\n\r\ndef get_budget_vs_actual_spending(project):\r\n    budget_data = Budget.objects.filter(project=project).values('category').annotate(budgeted=Sum('amount'))\r\n    expense_data = Expense.objects.filter(project=project).values('category').annotate(spent=Sum('amount'))\r\n    data = {item['category']: {'budgeted': item['budgeted'], 'spent': 0} for item in budget_data}\r\n    for item in expense_data:\r\n        if item['category'] in data:\r\n            data[item['category']]['spent'] = item['spent']\r\n        else:\r\n            data[item['category']] = {'budgeted': 0, 'spent': item['spent']}\r\n    return data\r\n\r\ndef get_expense_breakdown(project):\r\n    expense_breakdown = Expense.objects.filter(project=project).values('category').annotate(amount=Sum('amount'))\r\n    return expense_breakdown\r\n    \r\n\r\n@api_view(['GET'])\r\ndef data_list(request, offset):\r\n    if request.method == 'GET':\r\n        tasks = Task.objects.all()\r\n        taskData = TaskSerializer(tasks, many=True)\r\n        return Response({\r\n            \"data\": taskData.data\r\n        })\r\n    \r\n\r\n\r\n\r\ndef public_home(request):\r\n    return render(request, 'home/public_home.html')\r\n\r\ndef public_about(request):\r\n    return render(request, 'home/about.html')\r\n\r\ndef public_services(request):\r\n    return render(request, 'home/services.html')\r\n\r\n\r\ndef other_hub(request):\r\n    # Set default project_type to 'construction'\r\n    project_type = request.GET.get('project_type', 'construction')\r\n    \r\n    # Filter projects by the specified or default project type\r\n    projects = Project.objects.filter(project_type=project_type)\r\n\r\n    if request.method == 'POST':\r\n        if 'document' in request.FILES:\r\n            project_id = request.POST.get('project_id')\r\n            try:\r\n                project = get_object_or_404(Project, pk=project_id)\r\n            except Project.DoesNotExist:\r\n                return render(request, 'home/OtherProjects.html', {'error': 'Project not found', 'projects': projects})\r\n            file = request.FILES['document']\r\n            is_model = request.POST.get('is_model', 'off') == 'on'\r\n            ProjectDocument.objects.create(project=project, file=file, is_model=is_model)\r\n            return HttpResponseRedirect(reverse('other_hub') + f'?project_type={project_type}')\r\n        elif 'file' in request.FILES:\r\n            form = ReferenceMaterialForm(request.POST, request.FILES)\r\n            if form.is_valid():\r\n                reference_material = form.save(commit=False)\r\n                project_id = form.cleaned_data['project'].id\r\n                reference_material.project = get_object_or_404(Project, pk=project_id)\r\n                reference_material.save()\r\n                return HttpResponseRedirect(reverse('other_hub') + f'?project_type={project_type}')\r\n            else:\r\n                return render(request, 'home/OtherProjects.html', {'error': 'Invalid form submission', 'projects': projects})\r\n\r\n    reference_form = ReferenceMaterialForm()\r\n    project_data = []\r\n    for project in projects:\r\n        phases = project.phases.all()\r\n        phase_data = []\r\n        total_hours = 0\r\n        completed_hours = 0\r\n        for phase in phases:\r\n            tasks = phase.tasks.filter(parent_task__isnull=True)\r\n            total_phase_tasks = phase.tasks.count()\r\n            completed_phase_tasks = phase.tasks.filter(status='closed').count()\r\n            phase_completion_percentage = (completed_phase_tasks / total_phase_tasks) * 100 if total_phase_tasks > 0 else 0\r\n            phase_data.append({\r\n                'phase': phase,\r\n                'tasks': tasks,\r\n                'completion_percentage': phase_completion_percentage\r\n            })\r\n            for task in phase.tasks.all():\r\n                if task.hours:\r\n                    total_hours += task.hours\r\n                    if task.status == 'closed':\r\n                        completed_hours += task.hours\r\n        remaining_hours = total_hours - completed_hours\r\n        completion_percentage = (completed_hours / total_hours) * 100 if total_hours > 0 else 0\r\n        project_data.append({\r\n            'project': project,\r\n            'phases': phase_data,\r\n            'total_hours': total_hours,\r\n            'completed_hours': completed_hours,\r\n            'remaining_hours': remaining_hours,\r\n            'completion_percentage': completion_percentage\r\n        })\r\n\r\n    return render(request, 'home/OtherProjects.html', {\r\n        'project_data': project_data,\r\n        'reference_form': reference_form,\r\n        'project_type': project_type  # Pass the project_type to the template\r\n    })\r\n    \r\n    \r\nimport logging\r\n\r\nlogger = logging.getLogger(__name__)\r\n\r\ndef tasks_data(request):\r\n    project_id = request.GET.get('project_id')\r\n    category_filter = request.GET.get('category', '')  # Get category filter from request\r\n\r\n    if project_id:\r\n        tasks = Task.objects.filter(phase__project_id=project_id)\r\n    else:\r\n        tasks = Task.objects.all()\r\n\r\n    if category_filter:\r\n        tasks = tasks.filter(category__icontains=category_filter)  # Correct filter syntax\r\n\r\n    tasks = tasks.values(\r\n        'id', 'title', 'status', 'priority', 'due_date', 'start_date', 'hours', 'assigned_to__username', 'phase__name', 'completed', 'parent_task_id'\r\n    )\r\n    \r\n    tasks_list = list(tasks)\r\n\r\n    # Calculate phase start date, due date, and total hours\r\n    phases = ProjectPhase.objects.filter(project_id=project_id) if project_id else ProjectPhase.objects.all()\r\n    phase_data = []\r\n    for phase in phases:\r\n        phase_tasks = Task.objects.filter(phase=phase)\r\n        if phase_tasks.exists():\r\n            start_date = phase_tasks.order_by('start_date').first().start_date\r\n            due_date = phase_tasks.order_by('-due_date').first().due_date\r\n            total_hours = sum(task.hours for task in phase_tasks if task.hours)\r\n            phase_data.append({\r\n                'phase_name': phase.name,\r\n                'start_date': start_date.strftime('%Y-%m-%d') if start_date else None,\r\n                'due_date': due_date.strftime('%Y-%m-%d') if due_date else None,\r\n                'total_hours': total_hours\r\n            })\r\n    \r\n    return JsonResponse({\r\n        'tasks': tasks_list,\r\n        'phases': phase_data\r\n    })\r\n\r\n    \r\n@csrf_exempt\r\ndef update_task_status(request):\r\n    if request.method == 'POST':\r\n        task_id = request.POST.get('id')\r\n        completed = request.POST.get('completed') == 'true'\r\n        try:\r\n            task = Task.objects.get(id=task_id)\r\n            task.completed = completed\r\n            task.save()\r\n            return JsonResponse({'status': 'success'})\r\n        except Task.DoesNotExist:\r\n            return JsonResponse({'status': 'error', 'message': 'Task not found'}, status=404)\r\n    return JsonResponse({'status': 'error', 'message': 'Invalid request'}, status=400)\r\n    \r\n    \r\n@csrf_exempt\r\ndef update_task(request):\r\n    if request.method == 'POST':\r\n        task_id = request.POST.get('id')\r\n        title = request.POST.get('title')\r\n        start_date = request.POST.get('start_date')\r\n        duration = request.POST.get('duration')\r\n        progress = request.POST.get('progress')\r\n        parent = request.POST.get('parent')\r\n        phase_id = request.POST.get('phase')\r\n\r\n        try:\r\n            task = Task.objects.get(id=task_id)\r\n            task.title = title\r\n            task.start_date = datetime.strptime(start_date, '%Y-%m-%d %H:%M')\r\n            task.hours = duration\r\n            task.progress = progress\r\n\r\n            # Validate parent_task_id\r\n            if parent:\r\n                try:\r\n                    parent_task = Task.objects.get(id=parent)\r\n                    task.parent_task = parent_task\r\n                except Task.DoesNotExist:\r\n                    task.parent_task = None\r\n            else:\r\n                task.parent_task = None\r\n\r\n            # Validate phase_id\r\n            if phase_id:\r\n                try:\r\n                    phase = ProjectPhase.objects.get(id=phase_id)\r\n                    task.phase = phase\r\n                except ProjectPhase.DoesNotExist:\r\n                    task.phase = None\r\n\r\n            task.save()\r\n            return JsonResponse({'status': 'success'})\r\n        except Task.DoesNotExist:\r\n            return JsonResponse({'status': 'error', 'message': 'Task not found'}, status=404)\r\n        except ValueError as e:\r\n            return JsonResponse({'status': 'error', 'message': str(e)}, status=400)\r\n    return JsonResponse({'status': 'error', 'message': 'Invalid request'}, status=400)\r\n\r\n@csrf_exempt\r\ndef add_task(request):\r\n    if request.method == 'POST':\r\n        title = request.POST.get('title')\r\n        start_date = request.POST.get('start_date')\r\n        duration = request.POST.get('duration')\r\n        progress = request.POST.get('progress')\r\n        parent = request.POST.get('parent')\r\n        project_id = request.POST.get('project_id')\r\n        phase_id = request.POST.get('phase')\r\n\r\n        print(f\"Received data: title={title}, start_date={start_date}, duration={duration}, progress={progress}, parent={parent}, project_id={project_id}, phase_id={phase_id}\")\r\n\r\n        try:\r\n            project = Project.objects.get(id=project_id)\r\n            new_task = Task(\r\n                title=title,\r\n                start_date=datetime.strptime(start_date, '%Y-%m-%d %H:%M'),\r\n                hours=duration,\r\n                progress=progress,\r\n                project=project\r\n            )\r\n\r\n            # Validate parent_task_id\r\n            if parent:\r\n                try:\r\n                    parent_task = Task.objects.get(id=parent)\r\n                    new_task.parent_task = parent_task\r\n                except Task.DoesNotExist:\r\n                    new_task.parent_task = None\r\n\r\n            # Validate phase_id\r\n            if phase_id:\r\n                try:\r\n                    phase = ProjectPhase.objects.get(id=phase_id)\r\n                    new_task.phase = phase\r\n                except ProjectPhase.DoesNotExist:\r\n                    new_task.phase = None\r\n\r\n            new_task.save()\r\n            print(f\"Task created successfully: {new_task}\")\r\n            return JsonResponse({'status': 'success', 'task_id': new_task.id})\r\n        except Project.DoesNotExist:\r\n            print(\"Project not found\")\r\n            return JsonResponse({'status': 'error', 'message': 'Project not found'}, status=404)\r\n        except ValueError as e:\r\n            print(f\"ValueError: {e}\")\r\n            return JsonResponse({'status': 'error', 'message': str(e)}, status=400)\r\n    return JsonResponse({'status': 'error', 'message': 'Invalid request'}, status=400)\r\n\r\n@csrf_exempt\r\ndef update_link(request):\r\n    if request.method == 'POST':\r\n        link_id = request.POST.get('id')\r\n        source = request.POST.get('source')\r\n        target = request.POST.get('target')\r\n        link_type = request.POST.get('type')\r\n        action = request.POST.get('action')\r\n\r\n        if action == 'add':\r\n            TaskLink.objects.create(source_id=source, target_id=target, type=link_type)\r\n        elif action == 'delete':\r\n            try:\r\n                link = TaskLink.objects.get(id=link_id)\r\n                link.delete()\r\n            except TaskLink.DoesNotExist:\r\n                return JsonResponse({'status': 'error', 'message': 'Link not found'}, status=404)\r\n        return JsonResponse({'status': 'success'})\r\n    return JsonResponse({'status': 'error', 'message': 'Invalid request'}, status=400)\r\n    \r\n    \r\n    \r\n    \r\n    \r\nfrom django.shortcuts import render, redirect, get_object_or_404\r\nfrom django.contrib.auth.decorators import login_required\r\nfrom .models import Conversation, Message\r\nfrom django.conf import settings\r\nimport os\r\nimport logging\r\nfrom gtts import gTTS\r\nimport time\r\nfrom PIL import Image  # For image processing\r\nimport openai\r\nfrom django.core.files.uploadedfile import InMemoryUploadedFile\r\n\r\nlogger = logging.getLogger(__name__)\r\n\r\n# Instantiate the OpenAI client\r\nopenai_client = openai.OpenAI(\r\n    api_key=settings.OPENAI_API_KEY\r\n)\r\n\r\n# List of allowed models\r\nALLOWED_MODELS = [\r\n    'gpt-4',\r\n    'gpt-4-vision',\r\n    'chatgpt-4o-latest',\r\n    'o1-preview',\r\n    'dall-e-generation',\r\n    'dall-e-edit',\r\n    'tts-1',\r\n]\r\n\r\n@login_required\r\ndef conversation_list(request):\r\n    conversations = Conversation.objects.filter(user=request.user).order_by('-created_at')\r\n    return render(request, 'home/conversation_list.html', {'conversations': conversations})\r\n\r\n@login_required\r\ndef new_conversation(request):\r\n    if request.method == 'POST':\r\n        title = request.POST.get('title') or 'New Conversation'\r\n        model_name = request.POST.get('model_name') or 'gpt-4'\r\n        if model_name not in ALLOWED_MODELS:\r\n            model_name = 'gpt-4'  # Default to gpt-4 if invalid model is selected\r\n        conversation = Conversation.objects.create(user=request.user, title=title, model_name=model_name)\r\n        return redirect('conversation_detail', conversation_id=conversation.id)\r\n    else:\r\n        return redirect('conversation_list')\r\n\r\ndef get_gpt_response(messages, model_name, user_input, image_file=None, include_context=True, max_context_messages=10):\r\n    if model_name in ['gpt-4', 'chatgpt-4o-latest', 'o1-preview']:\r\n        conversation_history = []\r\n        if include_context:\r\n            conversation_history = [\r\n                {\"role\": msg.sender, \"content\": msg.content}\r\n                for msg in messages\r\n            ]\r\n            # Limit to the last N messages\r\n            conversation_history = conversation_history[-max_context_messages:]\r\n            conversation_history.append({\"role\": \"user\", \"content\": user_input})\r\n\r\n        try:\r\n            response = openai_client.chat.completions.create(\r\n                model=model_name,\r\n                messages=conversation_history,\r\n            )\r\n            assistant_message = response.choices[0].message.content\r\n            return assistant_message.strip()\r\n        except openai.OpenAIError as e:\r\n            logger.error(f\"OpenAI API error: {e}\")\r\n            return \"An error occurred while processing your request.\"\r\n\r\n    elif model_name == 'gpt-4-vision':\r\n        # GPT-4 Vision is not available via the API yet\r\n        return \"GPT-4 Vision is not currently supported via the API.\"\r\n\r\n    elif model_name == 'dall-e-generation':\r\n        # Handle DALL\u00b7E Image Generation\r\n        try:\r\n            response = openai_client.images.generate(\r\n                prompt=user_input,\r\n                n=1,\r\n                size=\"1024x1024\",\r\n            )\r\n            image_url = response.data[0].url\r\n            return image_url  # Return the image URL\r\n        except openai.OpenAIError as e:\r\n            logger.error(f\"Error generating image: {e}\")\r\n            return \"An error occurred while generating the image.\"\r\n\r\n    elif model_name == 'dall-e-edit':\r\n        # Handle DALL\u00b7E Image Editing\r\n        if image_file:\r\n            try:\r\n                # Save the uploaded image temporarily\r\n                temp_dir = os.path.join(settings.MEDIA_ROOT, 'temp')\r\n                os.makedirs(temp_dir, exist_ok=True)\r\n                temp_image_path = os.path.join(temp_dir, f\"input_{int(time.time())}.png\")\r\n                with open(temp_image_path, 'wb') as f:\r\n                    for chunk in image_file.chunks():\r\n                        f.write(chunk)\r\n\r\n                # Open the image and ensure it's in RGBA mode with transparency\r\n                image = Image.open(temp_image_path).convert(\"RGBA\")\r\n                # Create a mask image (currently empty - you can create a mask if needed)\r\n                mask = Image.new(\"RGBA\", image.size, (0, 0, 0, 0))\r\n\r\n                # Save images to bytes\r\n                image_bytes = io.BytesIO()\r\n                image.save(image_bytes, format='PNG')\r\n                image_bytes.seek(0)\r\n\r\n                mask_bytes = io.BytesIO()\r\n                mask.save(mask_bytes, format='PNG')\r\n                mask_bytes.seek(0)\r\n\r\n                # Call the OpenAI API to edit the image\r\n                response = openai_client.images.edit(\r\n                    image=image_bytes,\r\n                    mask=mask_bytes,\r\n                    prompt=user_input,\r\n                    n=1,\r\n                    size=\"1024x1024\",\r\n                )\r\n                image_url = response.data[0].url\r\n\r\n                # Remove the temporary image file\r\n                os.remove(temp_image_path)\r\n\r\n                return image_url  # Return the edited image URL\r\n            except openai.OpenAIError as e:\r\n                logger.error(f\"Error editing image: {e}\")\r\n                return \"An error occurred while editing the image.\"\r\n            except Exception as e:\r\n                logger.error(f\"Unexpected error editing image: {e}\")\r\n                return \"An unexpected error occurred while editing the image.\"\r\n        else:\r\n            return \"Please upload an image to edit.\"\r\n\r\n    elif model_name == 'tts-1':\r\n        # Handle Text-to-Speech using gTTS\r\n        try:\r\n            tts = gTTS(text=user_input, lang='en')\r\n            audio_filename = f\"tts_output_{int(time.time())}.mp3\"\r\n            audio_filepath = os.path.join(settings.MEDIA_ROOT, audio_filename)\r\n            tts.save(audio_filepath)\r\n            audio_url = settings.MEDIA_URL + audio_filename\r\n            return audio_url  # Return the URL to the audio file\r\n        except Exception as e:\r\n            logger.error(f\"Error generating audio: {e}\")\r\n            return \"An error occurred while generating the audio.\"\r\n\r\n    else:\r\n        return \"Selected model not supported.\"\r\n\r\n@login_required\r\ndef conversation_detail(request, conversation_id):\r\n    conversation = get_object_or_404(Conversation, id=conversation_id, user=request.user)\r\n\r\n    if request.method == 'POST':\r\n        user_input = request.POST.get('message')\r\n        include_context = not request.POST.get('clear_context')\r\n\r\n        # Handle multiple file uploads\r\n        uploaded_files = request.FILES.getlist('files')\r\n\r\n        # Initialize a variable to hold combined file contents\r\n        files_content = \"\"\r\n\r\n        for uploaded_file in uploaded_files:\r\n            # Security check: Validate file size (e.g., max 2MB)\r\n            if uploaded_file.size > 2 * 1024 * 1024:  # 2 MB limit per file\r\n                continue  # Skip files that are too large\r\n\r\n            # Read file content\r\n            try:\r\n                file_content = uploaded_file.read().decode('utf-8', errors='ignore')\r\n                # Append file name and content to files_content\r\n                files_content += f\"\\n### File: {uploaded_file.name}\\n{file_content}\\n\"\r\n            except Exception as e:\r\n                logger.error(f\"Error reading file {uploaded_file.name}: {e}\")\r\n                continue  # Skip files that can't be read\r\n\r\n        # Construct the full user input including files\r\n        full_user_input = user_input\r\n        if files_content:\r\n            full_user_input += f\"\\n\\nPlease consider the following files:\\n{files_content}\"\r\n\r\n        # Save user's message\r\n        Message.objects.create(\r\n            conversation=conversation,\r\n            sender='user',\r\n            content=full_user_input,\r\n            message_type='text'\r\n        )\r\n\r\n        # Fetch updated messages including the new user message\r\n        messages = conversation.messages.order_by('created_at')\r\n\r\n        # Get assistant's response using the selected model\r\n        response = get_gpt_response(\r\n            messages, conversation.model_name, full_user_input, include_context=include_context\r\n        )\r\n\r\n        # Save assistant's message\r\n        Message.objects.create(\r\n            conversation=conversation,\r\n            sender='assistant',\r\n            content=response,\r\n            message_type='text'\r\n        )\r\n\r\n        return redirect('conversation_detail', conversation_id=conversation.id)\r\n\r\n    else:\r\n        messages = conversation.messages.order_by('created_at')\r\n        return render(\r\n            request,\r\n            'home/conversation_detail.html',\r\n            {'conversation': conversation, 'messages': messages}\r\n        )\r\n        \r\n@login_required\r\ndef delete_conversation(request, conversation_id):\r\n    conversation = get_object_or_404(Conversation, id=conversation_id, user=request.user)\r\n    if request.method == 'POST':\r\n        conversation.delete()\r\n        return redirect('conversation_list')\r\n    else:\r\n        return render(request, 'home/confirm_delete.html', {'conversation': conversation})\r\n        \r\n@login_required\r\ndef clear_conversation(request, conversation_id):\r\n    conversation = get_object_or_404(Conversation, id=conversation_id, user=request.user)\r\n    if request.method == 'POST':\r\n        # Delete all messages in the conversation\r\n        conversation.messages.all().delete()\r\n        return redirect('conversation_detail', conversation_id=conversation.id)\r\n    else:\r\n        return redirect('conversation_detail', conversation_id=conversation.id)\r\n        \r\n        \r\n@login_required\r\ndef delete_message(request, message_id):\r\n    message = get_object_or_404(Message, id=message_id)\r\n    conversation = message.conversation\r\n    if conversation.user != request.user:\r\n        return redirect('conversation_detail', conversation_id=conversation.id)\r\n\r\n    if request.method == 'POST':\r\n        message.delete()\r\n        return redirect('conversation_detail', conversation_id=conversation.id)\r\n    else:\r\n        return redirect('conversation_detail', conversation_id=conversation.id)\r\n\r\n@login_required\r\ndef export_conversation(request, conversation_id):\r\n    conversation = get_object_or_404(Conversation, id=conversation_id, user=request.user)\r\n    messages = conversation.messages.order_by('created_at')\r\n\r\n    # Prepare data for export\r\n    conversation_data = {\r\n        'title': conversation.title,\r\n        'model_name': conversation.model_name,\r\n        'messages': [\r\n            {\r\n                'sender': msg.sender,\r\n                'content': msg.content,\r\n                'message_type': msg.message_type,\r\n                'created_at': msg.created_at.isoformat(),\r\n            }\r\n            for msg in messages\r\n        ],\r\n    }\r\n\r\n    # Convert data to JSON and create the response\r\n    response = HttpResponse(json.dumps(conversation_data), content_type='application/json')\r\n    response['Content-Disposition'] = f'attachment; filename=\"{conversation.title}.json\"'\r\n    return response\r\n    \r\n@login_required\r\ndef import_conversation(request):\r\n    if request.method == 'POST':\r\n        form = ImportConversationForm(request.POST, request.FILES)\r\n        if form.is_valid():\r\n            conversation_file = request.FILES['conversations_file']\r\n            try:\r\n                # Read the file and parse JSON\r\n                data = json.load(conversation_file)\r\n\r\n                # Create a new conversation\r\n                conversation = Conversation.objects.create(\r\n                    user=request.user,\r\n                    title=data.get('title', 'Imported Conversation'),\r\n                    model_name=data.get('model_name', 'gpt-4'),\r\n                )\r\n\r\n                # Create messages\r\n                for msg_data in data['messages']:\r\n                    Message.objects.create(\r\n                        conversation=conversation,\r\n                        sender=msg_data['sender'],\r\n                        content=msg_data['content'],\r\n                        message_type=msg_data.get('message_type', 'text'),\r\n                        # Optionally set created_at if you trust the data\r\n                        # created_at=msg_data.get('created_at', timezone.now()),\r\n                    )\r\n\r\n                return redirect('conversation_detail', conversation_id=conversation.id)\r\n\r\n            except Exception as e:\r\n                logger.error(f\"Error importing conversation: {e}\")\r\n                # Handle error (e.g., show a message to the user)\r\n                return render(request, 'home/import_conversation.html', {\r\n                    'form': form,\r\n                    'error_message': 'An error occurred while importing the conversation.',\r\n                })\r\n        else:\r\n            # Form is not valid\r\n            return render(request, 'home/import_conversation.html', {'form': form})\r\n    else:\r\n        form = ImportConversationForm()\r\n        return render(request, 'home/import_conversation.html', {'form': form})\r\n        \r\ndef export_projects(request):\r\n    projects = Project.objects.all()\r\n    data = []\r\n    for project in projects:\r\n        data.append({\r\n            'title': project.title,\r\n            'description': project.description,\r\n            'start_date': project.start_date.strftime('%Y-%m-%d'),\r\n            'end_date': project.end_date.strftime('%Y-%m-%d'),\r\n            # Include other fields as needed\r\n        })\r\n    response = HttpResponse(json.dumps(data), content_type='application/json')\r\n    response['Content-Disposition'] = 'attachment; filename=\"projects.json\"'\r\n    return response\r\n\r\ndef import_projects(request):\r\n    if request.method == 'POST':\r\n        file = request.FILES['file']\r\n        data = json.load(file)\r\n        for item in data:\r\n            project, created = Project.objects.get_or_create(\r\n                title=item['title'],\r\n                defaults={\r\n                    'description': item['description'],\r\n                    'start_date': item['start_date'],\r\n                    'end_date': item['end_date'],\r\n                    # Set other fields as needed\r\n                }\r\n            )\r\n        return redirect('construction_hub')\r\n    return render(request, 'home/import_projects.html')\r\n        \r\nfrom django.shortcuts import render, redirect, get_object_or_404\r\nfrom .models import Project, ProjectImage\r\nfrom .forms import ProjectImageForm\r\n\r\ndef upload_project_image(request, project_id):\r\n    project = get_object_or_404(Project, id=project_id)\r\n    if request.method == 'POST':\r\n        form = ProjectImageForm(request.POST, request.FILES)\r\n        if form.is_valid():\r\n            project_image = form.save(commit=False)\r\n            project_image.project = project\r\n            project_image.save()\r\n            return redirect('construction_hub')\r\n    else:\r\n        form = ProjectImageForm()\r\n    return render(request, 'home/upload_project_image.html', {'form': form, 'project': project})\r\n\r\nfrom .forms import MaterialForm, LaborEntryForm\r\n\r\ndef budget_page(request, project_id):\r\n    project = get_object_or_404(Project, id=project_id)\r\n    materials = project.materials.select_related('category')\r\n    labor_entries = project.labor_entries.select_related('user')\r\n\r\n    if request.method == 'POST':\r\n        if 'add_material' in request.POST:\r\n            material_form = MaterialForm(request.POST)\r\n            labor_form = LaborEntryForm()  # Empty form\r\n            if material_form.is_valid():\r\n                material = material_form.save(commit=False)\r\n                material.project = project\r\n                material.save()\r\n                return redirect('budget_page', project_id=project.id)\r\n        elif 'add_labor' in request.POST:\r\n            material_form = MaterialForm()  # Empty form\r\n            labor_form = LaborEntryForm(request.POST)\r\n            if labor_form.is_valid():\r\n                labor_entry = labor_form.save(commit=False)\r\n                labor_entry.project = project\r\n                labor_entry.save()\r\n                return redirect('budget_page', project_id=project.id)\r\n    else:\r\n        material_form = MaterialForm()\r\n        labor_form = LaborEntryForm()\r\n\r\n    total_material_cost = sum(m.total_cost for m in materials)\r\n    total_labor_cost = sum(l.total_pay for l in labor_entries)\r\n    total_cost = total_material_cost + total_labor_cost\r\n    cost_per_sqft = total_cost / project.square_footage if project.square_footage else 0\r\n\r\n    context = {\r\n        'project': project,\r\n        'materials': materials,\r\n        'labor_entries': labor_entries,\r\n        'material_form': material_form,\r\n        'labor_form': labor_form,\r\n        'total_material_cost': total_material_cost,\r\n        'total_labor_cost': total_labor_cost,\r\n        'total_cost': total_cost,\r\n        'cost_per_sqft': cost_per_sqft,\r\n    }\r\n    return render(request, 'home/budget_page.html', context)\r\n    \r\nfrom .forms import ProjectNoteForm, ProjectAttachmentForm\r\n\r\ndef project_main(request, project_id):\r\n    project = get_object_or_404(Project, id=project_id)\r\n    notes = project.project_notes.all()\r\n    attachments = project.attachments.all()\r\n\r\n    if request.method == 'POST':\r\n        if 'add_note' in request.POST:\r\n            note_form = ProjectNoteForm(request.POST)\r\n            attachment_form = ProjectAttachmentForm()  # Empty form\r\n            if note_form.is_valid():\r\n                note = note_form.save(commit=False)\r\n                note.project = project\r\n                note.created_by = request.user\r\n                note.save()\r\n                return redirect('project_main', project_id=project.id)\r\n        elif 'add_attachment' in request.POST:\r\n            note_form = ProjectNoteForm()  # Empty form\r\n            attachment_form = ProjectAttachmentForm(request.POST, request.FILES)\r\n            if attachment_form.is_valid():\r\n                attachment = attachment_form.save(commit=False)\r\n                attachment.project = project\r\n                attachment.uploaded_by = request.user\r\n                attachment.save()\r\n                return redirect('project_main', project_id=project.id)\r\n    else:\r\n        note_form = ProjectNoteForm()\r\n        attachment_form = ProjectAttachmentForm()\r\n\r\n    context = {\r\n        'project': project,\r\n        'notes': notes,\r\n        'attachments': attachments,\r\n        'note_form': note_form,\r\n        'attachment_form': attachment_form,\r\n    }\r\n    return render(request, 'home/project_main.html', context)\r\n\r\n\r\n{% extends 'layouts/base.html' %}\r\n{% load static %}\r\n{% load custom_filters %}\r\n{% block stylesheets %}\r\n<style>\r\n.status-open {\r\n    border-left: 5px solid #007bff; /* Blue */\r\n    background-color: #e7f3ff; /* Light Blue */\r\n}\r\n\r\n.status-closed {\r\n    border-left: 5px solid #28a745; /* Green */\r\n    background-color: #e6f9e6; /* Light Green */\r\n}\r\n\r\n.status-in_progress {\r\n    border-left: 5px solid #ffc107; /* Yellow */\r\n    background-color: #fff8e1; /* Light Yellow */\r\n}\r\n\r\n.status-waiting_for_materials {\r\n    border-left: 5px solid #17a2b8; /* Teal */\r\n    background-color: #e0f7f9; /* Light Teal */\r\n}\r\n\r\n.status-on_hold {\r\n    border-left: 5px solid #6c757d; /* Gray */\r\n    background-color: #f2f2f2; /* Light Gray */\r\n}\r\n\r\n.strikethrough {\r\n    text-decoration: line-through;\r\n    text-decoration-thickness: 3px; /* Thicken the strikethrough line */\r\n}\r\n\r\n.indented {\r\n    padding-left: 20px;\r\n}\r\n\r\n.priority-high {\r\n    border-left: 5px solid #dc3545; /* Red */\r\n    background-color: #f8d7da; /* Light red */\r\n}\r\n\r\n.priority-medium {\r\n    border-left: 5px solid #ffc107; /* Yellow */\r\n    background-color: #fff8e1; /* Light Yellow */\r\n}\r\n\r\n.priority-low {\r\n    border-left: 5px solid #28a745; /* Green */\r\n    background-color: #e6f9e6; /* Light Green */\r\n}\r\n\r\n.assigned-to-michael {\r\n    border-left: 5px solid #007bff; /* Blue */\r\n    background-color: #e7f3ff; /* Light Blue */\r\n}\r\n\r\n.assigned-to-nicholas {\r\n    border-left: 5px solid #28a745; /* Green */\r\n    background-color: #e6f9e6; /* Light Green */\r\n}\r\n\r\n.assigned-to-nick {\r\n    border-left: 5px solid #dc3545; /* Red */\r\n    background-color: #f8d7da; /* Light Red */\r\n}\r\n\r\n.assigned-to-other {\r\n    border-left: 5px solid #17a2b8; /* Teal */\r\n    background-color: #e0f7f9; /* Light Teal */\r\n}\r\n\r\n.dataTables_wrapper {\r\n    width: 100%;\r\n}\r\n\r\n.task-grid-container {\r\n    width: 100%;\r\n    overflow-x: auto;\r\n}\r\n</style>\r\n<link rel=\"stylesheet\" href=\"https://cdn.dhtmlx.com/gantt/edge/dhtmlxgantt.css\" type=\"text/css\">\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.datatables.net/1.11.3/css/jquery.dataTables.css\">\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.datatables.net/rowgroup/1.1.3/css/rowGroup.dataTables.css\">\r\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap-treeview/1.2.0/bootstrap-treeview.min.css\">\r\n<link rel=\"stylesheet\" href=\"https://cdn.daypilot.org/daypilot-lite.min.css\">\r\n{% endblock stylesheets %}\r\n{% block content %}\r\n<div class=\"container mt-4\">\r\n    <h1 class=\"mb-4\">Projects Hub</h1>\r\n    {% if error %}\r\n    <div class=\"alert alert-danger\">{{ error }}</div>\r\n    {% endif %}\r\n\r\n    <!-- Dropdown to select project -->\r\n    <div class=\"dropdown mb-3\">\r\n        <button class=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"projectDropdown\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n            Select Project\r\n        </button>\r\n        <div class=\"dropdown-menu\" aria-labelledby=\"projectDropdown\">\r\n            <a class=\"dropdown-item\" href=\"#hub\" data-toggle=\"tab\">Hub</a>\r\n            {% for project_info in project_data %}\r\n            <a class=\"dropdown-item\" href=\"#project-{{ project_info.project.id }}\" data-toggle=\"tab\">{{ project_info.project.title }}</a>\r\n            {% endfor %}\r\n        </div>\r\n    </div>\r\n\r\n    <!-- Tab content -->\r\n    <div class=\"tab-content mt-5\" id=\"projectTabsContent\">\r\n        <!-- Hub Tab Content -->\r\n        <div class=\"tab-pane fade show active\" id=\"hub\" role=\"tabpanel\">\r\n            <!-- Include your hub content here -->\r\n            <h2>Welcome to the Projects Hub</h2>\r\n            <!-- You can add content or remove this section if not needed -->\r\n        </div>\r\n\r\n        <!-- Project Tabs Content -->\r\n        {% for project_info in project_data %}\r\n        <div class=\"tab-pane fade\" id=\"project-{{ project_info.project.id }}\" role=\"tabpanel\">\r\n            <!-- Tab navigation for project details -->\r\n            <ul class=\"nav nav-tabs\" id=\"projectDetailTabs-{{ project_info.project.id }}\" role=\"tablist\">\r\n                <!-- Main Tab -->\r\n                <li class=\"nav-item\">\r\n                    <a class=\"nav-link active\" id=\"main-tab-{{ project_info.project.id }}\" data-toggle=\"tab\" href=\"#main-{{ project_info.project.id }}\" role=\"tab\" aria-controls=\"main-{{ project_info.project.id }}\">Main</a>\r\n                </li>\r\n                <!-- Phases Tab -->\r\n                <li class=\"nav-item\">\r\n                    <a class=\"nav-link\" id=\"phases-tab-{{ project_info.project.id }}\" data-toggle=\"tab\" href=\"#phases-{{ project_info.project.id }}\" role=\"tab\" aria-controls=\"phases-{{ project_info.project.id }}\">Phases</a>\r\n                </li>\r\n                <!-- Budget Tab -->\r\n                <li class=\"nav-item\">\r\n                    <a class=\"nav-link\" id=\"budget-tab-{{ project_info.project.id }}\" data-toggle=\"tab\" href=\"#budget-{{ project_info.project.id }}\" role=\"tab\" aria-controls=\"budget-{{ project_info.project.id }}\">Budget</a>\r\n                </li>\r\n                <!-- Gallery Tab -->\r\n                <li class=\"nav-item\">\r\n                    <a class=\"nav-link\" id=\"gallery-tab-{{ project_info.project.id }}\" data-toggle=\"tab\" href=\"#gallery-{{ project_info.project.id }}\" role=\"tab\" aria-controls=\"gallery-{{ project_info.project.id }}\">Gallery</a>\r\n                </li>\r\n                <!-- Tasks Tab -->\r\n                <li class=\"nav-item\">\r\n                    <a class=\"nav-link\" id=\"tasks-tab-{{ project_info.project.id }}\" data-toggle=\"tab\" href=\"#tasks-{{ project_info.project.id }}\" role=\"tab\" aria-controls=\"tasks-{{ project_info.project.id }}\">Tasks</a>\r\n                </li>\r\n            </ul>\r\n\r\n            <!-- Tab content for project details -->\r\n            <div class=\"tab-content\" id=\"projectDetailTabsContent-{{ project_info.project.id }}\">\r\n                <!-- Main Tab Content -->\r\n                <div class=\"tab-pane fade show active\" id=\"main-{{ project_info.project.id }}\" role=\"tabpanel\" aria-labelledby=\"main-tab-{{ project_info.project.id }}\">\r\n                    {% include 'home/project_main.html' with project=project_info.project attachment_form=attachment_form attachments=attachments note_form=note_form notes=notes %}\r\n                </div>\r\n\r\n                <!-- Phases Tab Content -->\r\n                <div class=\"tab-pane fade\" id=\"phases-{{ project_info.project.id }}\" role=\"tabpanel\" aria-labelledby=\"phases-tab-{{ project_info.project.id }}\">\r\n                    <h2 class=\"mt-4\">{{ project_info.project.title }} - Phases</h2>\r\n                    <!-- Include your existing code for phases here -->\r\n                    <div class=\"accordion\" id=\"phasesAccordion-{{ project_info.project.id }}\">\r\n                        {% for phase_info in project_info.phases %}\r\n                        <div class=\"card\">\r\n                            <div class=\"card-header\" id=\"heading-{{ phase_info.phase.id }}\">\r\n                                <h2 class=\"mb-0\">\r\n                                    <button class=\"btn btn-link w-100 text-left\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapse-{{ phase_info.phase.id }}\" aria-expanded=\"true\" aria-controls=\"collapse-{{ phase_info.phase.id }}\">\r\n                                        {{ phase_info.phase.name }}\r\n                                    </button>\r\n                                </h2>\r\n                            </div>\r\n\r\n                            <div id=\"collapse-{{ phase_info.phase.id }}\" class=\"collapse\" aria-labelledby=\"heading-{{ phase_info.phase.id }}\" data-parent=\"#phasesAccordion-{{ project_info.project.id }}\">\r\n                                <div class=\"card-body\">\r\n                                    <p>{{ phase_info.phase.description }}</p>\r\n                                    <p>Start Date: {{ phase_info.phase.start_date }}</p>\r\n                                    <p>End Date: {{ phase_info.phase.end_date }}</p>\r\n                                    {% if phase_info.phase.is_critical %}\r\n                                    <p><strong>Critical Path</strong></p>\r\n                                    {% endif %}\r\n                                    <div class=\"progress mb-3\">\r\n                                        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: {{ phase_info.completion_percentage }}%;\" aria-valuenow=\"{{ phase_info.completion_percentage }}\" aria-valuemin=\"0\" aria-valuemax=\"100\">{{ phase_info.completion_percentage }}%</div>\r\n                                    </div>\r\n\r\n                                    <!-- Tasks under each phase -->\r\n                                    <h3>Tasks</h3>\r\n                                    <ul class=\"list-group\">\r\n                                        {% for task in phase_info.tasks %}\r\n                                        <li class=\"list-group-item status-{{ task.status }}\">\r\n                                            <a href=\"{% url 'task_detail' task.pk %}\" class=\"list-group-item list-group-item-action\">\r\n                                                <h5>{{ task.title }}</h5>\r\n                                                <p>{{ task.description|truncatewords:20 }}</p>\r\n                                                <small>\r\n                                                    Status: {{ task.get_status_display }} | Priority: {{ task.get_priority_display }} | Due: {{ task.due_date }} | Assigned to: {{ task.assigned_to.username }}\r\n                                                </small>\r\n                                            </a>\r\n                                            {% if task.subtasks.all %}\r\n                                            <!-- Display subtasks -->\r\n                                            <ul class=\"list-group mt-2\">\r\n                                                {% for subtask in task.subtasks.all %}\r\n                                                <li class=\"list-group-item status-{{ subtask.status }}\">\r\n                                                    <a href=\"{% url 'task_detail' subtask.pk %}\" class=\"list-group-item list-group-item-action\">\r\n                                                        <h6>{{ subtask.title }}</h6>\r\n                                                        <p>{{ subtask.description|truncatewords:20 }}</p>\r\n                                                        <small>\r\n                                                            Status: {{ subtask.get_status_display }} | Priority: {{ subtask.get_priority_display }} | Due: {{ subtask.due_date }} | Assigned to: {{ subtask.assigned_to.username }}\r\n                                                        </small>\r\n                                                    </a>\r\n                                                </li>\r\n                                                {% endfor %}\r\n                                            </ul>\r\n                                            {% endif %}\r\n                                        </li>\r\n                                        {% endfor %}\r\n                                    </ul>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        {% endfor %}\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Budget Tab Content -->\r\n                <div class=\"tab-pane fade\" id=\"budget-{{ project_info.project.id }}\" role=\"tabpanel\" aria-labelledby=\"budget-tab-{{ project_info.project.id }}\">\r\n                    {% include 'home/budget_page.html' with project=project_info.project %}\r\n\t\t\t\t\t\r\n                </div>\r\n\r\n                <!-- Gallery Tab Content -->\r\n                <div class=\"tab-pane fade\" id=\"gallery-{{ project_info.project.id }}\" role=\"tabpanel\" aria-labelledby=\"gallery-tab-{{ project_info.project.id }}\">\r\n                    <h3>Gallery</h3>\r\n                    <!-- Image Upload Form -->\r\n                    <form action=\"{% url 'upload_project_image' project_info.project.id %}\" method=\"post\" enctype=\"multipart/form-data\">\r\n                        {% csrf_token %}\r\n                        <div class=\"form-group\">\r\n                            <label for=\"image\">Upload Image</label>\r\n                            <input type=\"file\" class=\"form-control\" id=\"image\" name=\"image\" required>\r\n                        </div>\r\n                        <button type=\"submit\" class=\"btn btn-primary\">Upload</button>\r\n                    </form>\r\n                    <!-- Image Carousel with Lightbox -->\r\n                    {% if project_info.project.images.all %}\r\n                    <div id=\"carousel-{{ project_info.project.id }}\" class=\"carousel slide mt-4\" data-ride=\"carousel\">\r\n                        <div class=\"carousel-inner\">\r\n                            {% for image in project_info.project.images.all %}\r\n                            <div class=\"carousel-item {% if forloop.first %}active{% endif %}\">\r\n                                <a href=\"{{ image.image.url }}\" data-lightbox=\"gallery-{{ project_info.project.id }}\">\r\n                                    <img src=\"{{ image.image.url }}\" class=\"d-block mx-auto\" style=\"max-height: 400px; width: auto;\" alt=\"Project Image\">\r\n                                </a>\r\n                            </div>\r\n                            {% endfor %}\r\n                        </div>\r\n                        <a class=\"carousel-control-prev\" href=\"#carousel-{{ project_info.project.id }}\" role=\"button\" data-slide=\"prev\">\r\n                            <span class=\"carousel-control-prev-icon\" aria-hidden=\"true\"></span>\r\n                        </a>\r\n                        <a class=\"carousel-control-next\" href=\"#carousel-{{ project_info.project.id }}\" role=\"button\" data-slide=\"next\">\r\n                            <span class=\"carousel-control-next-icon\" aria-hidden=\"true\"></span>\r\n                        </a>\r\n                    </div>\r\n                    {% else %}\r\n                    <p>No images uploaded yet.</p>\r\n                    {% endif %}\r\n                </div>\r\n\r\n                <!-- Tasks Tab Content -->\r\n                <div class=\"tab-pane fade\" id=\"tasks-{{ project_info.project.id }}\" role=\"tabpanel\" aria-labelledby=\"tasks-tab-{{ project_info.project.id }}\">\r\n                    <div class=\"task-grid-container\">\r\n                        <!-- Include the tasks table or any relevant content -->\r\n                        <table id=\"tasksTable-{{ project_info.project.id }}\" class=\"display\" style=\"width: 100%;\">\r\n                            <!-- Table headers -->\r\n                            <thead>\r\n                                <tr>\r\n                                    <th></th>\r\n                                    <th>Title</th>\r\n                                    <th>Status</th>\r\n                                    <th>Priority</th>\r\n                                    <th>Start Date</th>\r\n                                    <th>Due Date</th>\r\n                                    <th>Hours</th>\r\n                                    <th>Assigned To</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <!-- Table body will be populated via JavaScript (DataTables) -->\r\n                            <tbody></tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n        {% endfor %}\r\n    </div>\r\n</div>\r\n{% endblock %}\r\n\r\n{% block javascripts %}\r\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script> <!-- Ensure jQuery is loaded first -->\r\n<script src=\"https://cdn.dhtmlx.com/gantt/edge/dhtmlxgantt.js\"></script>\r\n<script type=\"text/javascript\" charset=\"utf8\" src=\"https://cdn.datatables.net/1.11.3/js/jquery.dataTables.js\"></script>\r\n<script type=\"text/javascript\" charset=\"utf8\" src=\"https://cdn.datatables.net/rowgroup/1.1.3/js/dataTables.rowGroup.js\"></script>\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap-treeview/1.2.0/bootstrap-treeview.min.js\"></script>\r\n<script src=\"https://cdn.daypilot.org/daypilot-lite.min.js\"></script>\r\n{% load custom_filters %}\r\n\r\n<script>\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n    {% for project_info in project_data %}\r\n    (function(projectId) {\r\n        console.log(\"Initializing Gantt chart for project:\", projectId);\r\n\r\n        const tasks = [\r\n            {% for phase_info in project_info.phases %}\r\n                {% for task in phase_info.tasks %}\r\n                {\r\n                    id: \"{{ task.id }}\",\r\n                    text: \"{{ task.title }}\",\r\n                    start_date: \"{{ task.start_date|default_if_none:task.created_at|date:'%Y-%m-%d %H:%M' }}\",\r\n                    duration: {{ task.hours|default:1 }},\r\n                    parent: \"{{ task|parent_id }}\", // Use custom filter\r\n                    progress: {{ task.progress|default:0 }},\r\n                    phase: \"{{ phase_info.phase.id }}\", // Include phase ID\r\n                    open: true\r\n                },\r\n                {% endfor %}\r\n            {% endfor %}\r\n        ];\r\n        console.log(\"Tasks for project\", projectId, \":\", tasks);\r\n\r\n        const ganttContainer = document.getElementById(\"gantt_here_\" + projectId);\r\n        console.log(\"Gantt container for project\", projectId, \":\", ganttContainer);\r\n\r\n        if (ganttContainer) {\r\n            try {\r\n                gantt.config.date_format = \"%Y-%m-%d %H:%M\";\r\n                gantt.init(ganttContainer);\r\n                gantt.clearAll(); // Clear any existing data\r\n                gantt.parse({ data: tasks });\r\n                console.log(\"Gantt chart initialized for project\", projectId);\r\n\r\n                // Event listener for task updates\r\n                gantt.attachEvent(\"onAfterTaskUpdate\", function(id, item) {\r\n                    console.log(\"Task updated:\", id, item);\r\n                    updateTask(id, item);\r\n                });\r\n\r\n                // Event listener for task progress changes\r\n                gantt.attachEvent(\"onTaskProgressChanged\", function(id, progress) {\r\n                    console.log(\"Task progress updated:\", id, progress);\r\n                    updateTask(id, gantt.getTask(id));\r\n                });\r\n\r\n                // Event listener for adding new tasks\r\n                gantt.attachEvent(\"onAfterTaskAdd\", function(id, item) {\r\n                    console.log(\"Task added:\", id, item);\r\n                    addTask(id, item, projectId);\r\n                });\r\n\r\n                // Event listener for task status changes\r\n                gantt.attachEvent(\"onTaskClick\", function(id, e) {\r\n                    const task = gantt.getTask(id);\r\n                    const completed = task.progress === 1;\r\n                    updateTaskStatus(id, completed);\r\n                });\r\n\r\n                // Event listener for adding links\r\n                gantt.attachEvent(\"onAfterLinkAdd\", function(id, link) {\r\n                    console.log(\"Link added:\", id, link);\r\n                    updateLink(id, link, 'add');\r\n                });\r\n\r\n                // Event listener for deleting links\r\n                gantt.attachEvent(\"onAfterLinkDelete\", function(id, link) {\r\n                    console.log(\"Link deleted:\", id, link);\r\n                    updateLink(id, link, 'delete');\r\n                });\r\n\r\n            } catch (error) {\r\n                console.error(\"Error initializing Gantt chart for project\", projectId, \":\", error);\r\n            }\r\n        } else {\r\n            console.error(\"Gantt container not found for project:\", projectId);\r\n        }\r\n    })({{ project_info.project.id }});\r\n    {% endfor %}\r\n});\r\n\r\n// Function to format date to 'YYYY-MM-DD HH:MM'\r\nfunction formatDate(date) {\r\n    const d = new Date(date);\r\n    const year = d.getFullYear();\r\n    const month = String(d.getMonth() + 1).padStart(2, '0');\r\n    const day = String(d.getDate()).padStart(2, '0');\r\n    const hours = String(d.getHours()).padStart(2, '0');\r\n    const minutes = String(d.getMinutes()).padStart(2, '0');\r\n    return `${year}-${month}-${day} ${hours}:${minutes}`;\r\n}\r\n\r\n// Function to update task\r\nfunction updateTask(id, task) {\r\n    const formattedStartDate = formatDate(task.start_date);\r\n    const parentTaskId = task.parent && task.parent !== \"0\" ? task.parent : null;\r\n\r\n    console.log('Updating task:', {\r\n        id: id,\r\n        title: task.text,\r\n        start_date: formattedStartDate,\r\n        duration: task.duration,\r\n        progress: task.progress,\r\n        parent: parentTaskId,\r\n        phase: task.phase // Include phase ID\r\n    });\r\n\r\n    $.ajax({\r\n        url: '{% url \"update_task\" %}',\r\n        method: 'POST',\r\n        data: {\r\n            'id': id,\r\n            'title': task.text,\r\n            'start_date': formattedStartDate,\r\n            'duration': task.duration,\r\n            'progress': task.progress,\r\n            'parent': parentTaskId,\r\n            'phase': task.phase, // Include phase ID\r\n            'csrfmiddlewaretoken': '{{ csrf_token }}'\r\n        },\r\n        success: function(response) {\r\n            console.log('Task updated successfully.', response);\r\n        },\r\n        error: function(xhr, status, error) {\r\n            console.error('Failed to update task:', error);\r\n        }\r\n    });\r\n}\r\n\r\n// Function to add new task\r\nfunction addTask(id, task, projectId) {\r\n    const formattedStartDate = formatDate(task.start_date);\r\n    const parentTaskId = task.parent && task.parent !== \"0\" ? task.parent : null;\r\n\r\n    console.log('Adding task:', {\r\n        id: id,\r\n        title: task.text,\r\n        start_date: formattedStartDate,\r\n        duration: task.duration,\r\n        progress: task.progress,\r\n        parent: parentTaskId,\r\n        project_id: projectId,\r\n        phase: task.phase // Include phase ID\r\n    });\r\n\r\n    $.ajax({\r\n        url: '{% url \"add_task\" %}',\r\n        method: 'POST',\r\n        data: {\r\n            'id': id,\r\n            'title': task.text,\r\n            'start_date': formattedStartDate,\r\n            'duration': task.duration,\r\n            'progress': task.progress,\r\n            'parent': parentTaskId,\r\n            'project_id': projectId,\r\n            'phase': task.phase, // Include phase ID\r\n            'csrfmiddlewaretoken': '{{ csrf_token }}'\r\n        },\r\n        success: function(response) {\r\n            console.log('Task added successfully.', response);\r\n        },\r\n        error: function(xhr, status, error) {\r\n            console.error('Failed to add task:', error);\r\n        }\r\n    });\r\n}\r\n\r\n// Function to update task status\r\nfunction updateTaskStatus(id, completed) {\r\n    console.log('Updating task status:', {\r\n        id: id,\r\n        completed: completed\r\n    });\r\n\r\n    $.ajax({\r\n        url: '{% url \"update_task_status\" %}',\r\n        method: 'POST',\r\n        data: {\r\n            'id': id,\r\n            'completed': completed,\r\n            'csrfmiddlewaretoken': '{{ csrf_token }}'\r\n        },\r\n        success: function(response) {\r\n            console.log('Task status updated successfully.', response);\r\n        },\r\n        error: function(xhr, status, error) {\r\n            console.error('Failed to update task status:', error);\r\n        }\r\n    });\r\n}\r\n\r\n// Function to update link\r\nfunction updateLink(id, link, action) {\r\n    console.log('Updating link:', {\r\n        id: id,\r\n        source: link.source,\r\n        target: link.target,\r\n        type: link.type,\r\n        action: action\r\n    });\r\n\r\n    $.ajax({\r\n        url: '{% url \"update_link\" %}',\r\n        method: 'POST',\r\n        data: {\r\n            'id': id,\r\n            'source': link.source,\r\n            'target': link.target,\r\n            'type': link.type,\r\n            'action': action,\r\n            'csrfmiddlewaretoken': '{{ csrf_token }}'\r\n        },\r\n        success: function(response) {\r\n            console.log('Link updated successfully.', response);\r\n        },\r\n        error: function(xhr, status, error) {\r\n            console.error('Failed to update link:', error);\r\n        }\r\n    });\r\n}\r\n</script>\r\n\r\n<script>\r\n$(document).ready(function() {\r\n    {% for project_info in project_data %}\r\n    var table{{ project_info.project.id }} = $('#tasksTable-{{ project_info.project.id }}').DataTable({\r\n        \"ajax\": {\r\n            \"url\": \"{% url 'tasks_data' %}?project_id={{ project_info.project.id }}\", // Assuming each project has its own data URL\r\n            \"dataSrc\": function(json) {\r\n                // Append phase data to task data\r\n                json.tasks.forEach(function(task) {\r\n                    var phase = json.phases.find(p => p.phase_name === task.phase__name);\r\n                    if (phase) {\r\n                        task.phase_start_date = phase.start_date;\r\n                        task.phase_due_date = phase.due_date;\r\n                        task.phase_total_hours = phase.total_hours;\r\n                    }\r\n                });\r\n                return json.tasks;\r\n            },\r\n            \"error\": function(xhr, error, thrown) {\r\n                console.error('Error fetching data:', xhr.responseText);\r\n                alert('An error occurred while fetching task data. Please check the console for more details.');\r\n            }\r\n        },\r\n        \"columns\": [\r\n            {\r\n                \"data\": null,\r\n                \"render\": function (data, type, row) {\r\n                    return '<input type=\"checkbox\" class=\"task-complete\" data-id=\"' + row.id + '\"' + (row.completed ? ' checked' : '') + '>';\r\n                }\r\n            },\r\n            {\r\n                \"data\": \"title\",\r\n                \"render\": function (data, type, row) {\r\n                    return row.parent_task_id ? '<span class=\"indented\">' + data + '</span>' : data;\r\n                }\r\n            },\r\n            { \"data\": \"status\" },\r\n            { \"data\": \"priority\" },\r\n            {\r\n                \"data\": \"start_date\",\r\n                \"render\": function (data, type, row) {\r\n                    return data ? new Date(data).toISOString().split('T')[0] : '';\r\n                }\r\n            },\r\n            {\r\n                \"data\": \"due_date\",\r\n                \"render\": function (data, type, row) {\r\n                    return data ? new Date(data).toISOString().split('T')[0] : '';\r\n                }\r\n            },\r\n            { \"data\": \"hours\" },\r\n            { \"data\": \"assigned_to__username\" }\r\n        ],\r\n        \"rowGroup\": {\r\n            \"dataSrc\": function(row) {\r\n                return row.phase__name;\r\n            },\r\n            \"startRender\": function(rows, group) {\r\n                var phase = rows.data().pluck('phase__name')[0];\r\n                var phase_start_date = rows.data().pluck('phase_start_date')[0];\r\n                var phase_due_date = rows.data().pluck('phase_due_date')[0];\r\n                var phase_total_hours = rows.data().pluck('phase_total_hours')[0];\r\n\r\n                return $('<tr/>')\r\n                    .append('<td colspan=\"2\">Phase: ' + phase + '</td>')\r\n                    .append('<td>' + rows.count() + ' tasks</td>')\r\n                    .append('<td></td>')\r\n                    .append('<td>' + (phase_start_date ? new Date(phase_start_date).toISOString().split('T')[0] : '') + '</td>')\r\n                    .append('<td>' + (phase_due_date ? new Date(phase_due_date).toISOString().split('T')[0] : '') + '</td>')\r\n                    .append('<td>' + phase_total_hours + '</td>')\r\n                    .append('<td></td>');\r\n            }\r\n        }\r\n    });\r\n\r\n    // Apply strikethrough and styles to completed tasks and priority\r\n    table{{ project_info.project.id }}.on('draw', function() {\r\n        $('#tasksTable-{{ project_info.project.id }} tbody tr').each(function() {\r\n            var $row = $(this);\r\n            var $checkbox = $row.find('.task-complete');\r\n            var status = $row.find('td:nth-child(3)').text().toLowerCase().replace(/\\s/g, '_');\r\n            var priority = $row.find('td:nth-child(4)').text().toLowerCase();\r\n            var assignedTo = $row.find('td:nth-child(8)').text().toLowerCase();\r\n\r\n            // Apply strikethrough to completed tasks\r\n            if ($checkbox.is(':checked')) {\r\n                $row.find('td').addClass('strikethrough');\r\n            }\r\n\r\n            // Apply status class to the row\r\n            $row.addClass('status-' + status);\r\n\r\n            // Apply priority class to the priority column\r\n            $row.find('td:nth-child(4)').addClass('priority-' + priority);\r\n\r\n            // Apply assigned_to class to the assigned_to column\r\n            if (assignedTo === 'michael') {\r\n                $row.find('td:nth-child(8)').addClass('assigned-to-michael');\r\n            } else if (assignedTo === 'nicholas') {\r\n                $row.find('td:nth-child(8)').addClass('assigned-to-nicholas');\r\n            } else if (assignedTo === 'nick') {\r\n                $row.find('td:nth-child(8)').addClass('assigned-to-nick');\r\n            } else {\r\n                $row.find('td:nth-child(8)').addClass('assigned-to-other');\r\n            }\r\n        });\r\n    });\r\n\r\n    // Handle checkbox click\r\n    $('#tasksTable-{{ project_info.project.id }} tbody').on('click', '.task-complete', function () {\r\n        var $checkbox = $(this);\r\n        var taskId = $checkbox.data('id');\r\n        var completed = $checkbox.is(':checked');\r\n        var $row = $checkbox.closest('tr');\r\n\r\n        // Apply or remove strikethrough\r\n        if (completed) {\r\n            $row.find('td').addClass('strikethrough');\r\n        } else {\r\n            $row.find('td').removeClass('strikethrough');\r\n        }\r\n\r\n        // Save the completion status to the server\r\n        $.ajax({\r\n            url: '{% url \"update_task_status\" %}',\r\n            method: 'POST',\r\n            data: {\r\n                'id': taskId,\r\n                'completed': completed,\r\n                'csrfmiddlewaretoken': '{{ csrf_token }}'\r\n            },\r\n            success: function(response) {\r\n                console.log('Task status updated successfully.');\r\n            },\r\n            error: function(xhr, status, error) {\r\n                console.error('Failed to update task status:', error);\r\n            }\r\n        });\r\n    });\r\n    {% endfor %}\r\n});\r\n</script>\r\n\r\n<script>\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n    {% for project_info in project_data %}\r\n    (function(projectId) {\r\n        console.log(\"Initializing Gantt chart for project:\", projectId);\r\n\r\n        const tasks = [\r\n            {% for phase_info in project_info.phases %}\r\n                {% for task in phase_info.tasks %}\r\n                {\r\n                    id: \"{{ task.id }}\",\r\n                    text: \"{{ task.title }}\",\r\n                    start_date: \"{{ task.start_date|default_if_none:task.created_at|date:'%Y-%m-%d %H:%M' }}\",\r\n                    duration: {{ task.hours|default:1 }},\r\n                    parent: \"{{ task|parent_id }}\", // Use custom filter\r\n                    progress: {{ task.progress|default:0 }},\r\n                    phase: \"{{ phase_info.phase.id }}\", // Include phase ID\r\n                    open: true\r\n                },\r\n                {% endfor %}\r\n            {% endfor %}\r\n        ];\r\n        console.log(\"Tasks for project\", projectId, \":\", tasks);\r\n\r\n        const ganttContainer = document.getElementById(\"gantt_here_\" + projectId);\r\n        console.log(\"Gantt container for project\", projectId, \":\", ganttContainer);\r\n\r\n        if (ganttContainer) {\r\n            try {\r\n                gantt.config.date_format = \"%Y-%m-%d %H:%M\";\r\n                gantt.init(ganttContainer);\r\n                gantt.clearAll(); // Clear any existing data\r\n                gantt.parse({ data: tasks });\r\n                console.log(\"Gantt chart initialized for project\", projectId);\r\n\r\n                // Event listener for task updates\r\n                gantt.attachEvent(\"onAfterTaskUpdate\", function(id, item) {\r\n                    console.log(\"Task updated:\", id, item);\r\n                    updateTask(id, item);\r\n                });\r\n\r\n                // Event listener for task progress changes\r\n                gantt.attachEvent(\"onTaskProgressChanged\", function(id, progress) {\r\n                    console.log(\"Task progress updated:\", id, progress);\r\n                    updateTask(id, gantt.getTask(id));\r\n                });\r\n\r\n                // Event listener for adding new tasks\r\n                gantt.attachEvent(\"onAfterTaskAdd\", function(id, item) {\r\n                    console.log(\"Task added:\", id, item);\r\n                    addTask(id, item, projectId);\r\n                });\r\n\r\n                // Event listener for task status changes\r\n                gantt.attachEvent(\"onTaskClick\", function(id, e) {\r\n                    const task = gantt.getTask(id);\r\n                    const completed = task.progress === 1;\r\n                    updateTaskStatus(id, completed);\r\n                });\r\n\r\n                // Event listener for adding links\r\n                gantt.attachEvent(\"onAfterLinkAdd\", function(id, link) {\r\n                    console.log(\"Link added:\", id, link);\r\n                    updateLink(id, link, 'add');\r\n                });\r\n\r\n                // Event listener for deleting links\r\n                gantt.attachEvent(\"onAfterLinkDelete\", function(id, link) {\r\n                    console.log(\"Link deleted:\", id, link);\r\n                    updateLink(id, link, 'delete');\r\n                });\r\n\r\n                // Initialize breakdown tree\r\n                initializeBreakdownTree(projectId);\r\n\r\n            } catch (error) {\r\n                console.error(\"Error initializing Gantt chart for project\", projectId, \":\", error);\r\n            }\r\n        } else {\r\n            console.error(\"Gantt container not found for project:\", projectId);\r\n        }\r\n    })({{ project_info.project.id }});\r\n    {% endfor %}\r\n});\r\n\r\n// Function to initialize breakdown tree\r\nfunction initializeBreakdownTree(projectId) {\r\n    const breakdownContainer = document.getElementById(\"breakdown_tree_\" + projectId);\r\n    if (!breakdownContainer) {\r\n        console.error(\"Breakdown container not found for project:\", projectId);\r\n        return;\r\n    }\r\n\r\n    const phases = {% for project_info in project_data %}{{ project_info.project.id }} == projectId ? {{ project_info.phases|safe }} : null{% if not forloop.last %} || {% endif %}{% endfor %};\r\n    if (!phases) {\r\n        console.error(\"Phases not found for project:\", projectId);\r\n        return;\r\n    }\r\n\r\n    const treeData = phases.map(phaseInfo => {\r\n        return {\r\n            text: phaseInfo.phase.name,\r\n            nodes: phaseInfo.tasks.map(task => ({\r\n                text: task.title\r\n            }))\r\n        };\r\n    });\r\n\r\n    $(breakdownContainer).treeview({\r\n        data: treeData,\r\n        levels: 1,\r\n        expandIcon: \"fa fa-plus\",\r\n        collapseIcon: \"fa fa-minus\",\r\n        nodeIcon: \"fa fa-folder\"\r\n    });\r\n}\r\n</script>\r\n\r\n<script>\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n    {% for project_info in project_data %}\r\n    (function(projectId) {\r\n        console.log(\"Initializing Gantt chart for project:\", projectId);\r\n\r\n        const tasks = [\r\n            {% for phase_info in project_info.phases %}\r\n                {% for task in phase_info.tasks %}\r\n                {\r\n                    id: \"{{ task.id }}\",\r\n                    text: \"{{ task.title }}\",\r\n                    start_date: \"{{ task.start_date|default_if_none:task.created_at|date:'%Y-%m-%d %H:%M' }}\",\r\n                    duration: {{ task.hours|default:1 }},\r\n                    parent: \"{{ task|parent_id }}\", // Use custom filter\r\n                    progress: {{ task.progress|default:0 }},\r\n                    phase: \"{{ phase_info.phase.id }}\", // Include phase ID\r\n                    open: true\r\n                },\r\n                {% endfor %}\r\n            {% endfor %}\r\n        ];\r\n        console.log(\"Tasks for project\", projectId, \":\", tasks);\r\n\r\n        const ganttContainer = document.getElementById(\"gantt_here_\" + projectId);\r\n        console.log(\"Gantt container for project\", projectId, \":\", ganttContainer);\r\n\r\n        if (ganttContainer) {\r\n            try {\r\n                gantt.config.date_format = \"%Y-%m-%d %H:%M\";\r\n                gantt.init(ganttContainer);\r\n                gantt.clearAll(); // Clear any existing data\r\n                gantt.parse({ data: tasks });\r\n                console.log(\"Gantt chart initialized for project\", projectId);\r\n\r\n                // Event listener for task updates\r\n                gantt.attachEvent(\"onAfterTaskUpdate\", function(id, item) {\r\n                    console.log(\"Task updated:\", id, item);\r\n                    updateTask(id, item);\r\n                });\r\n\r\n                // Event listener for task progress changes\r\n                gantt.attachEvent(\"onTaskProgressChanged\", function(id, progress) {\r\n                    console.log(\"Task progress updated:\", id, progress);\r\n                    updateTask(id, gantt.getTask(id));\r\n                });\r\n\r\n                // Event listener for adding new tasks\r\n                gantt.attachEvent(\"onAfterTaskAdd\", function(id, item) {\r\n                    console.log(\"Task added:\", id, item);\r\n                    addTask(id, item, projectId);\r\n                });\r\n\r\n                // Event listener for task status changes\r\n                gantt.attachEvent(\"onTaskClick\", function(id, e) {\r\n                    const task = gantt.getTask(id);\r\n                    const completed = task.progress === 1;\r\n                    updateTaskStatus(id, completed);\r\n                });\r\n\r\n                // Event listener for adding links\r\n                gantt.attachEvent(\"onAfterLinkAdd\", function(id, link) {\r\n                    console.log(\"Link added:\", id, link);\r\n                    updateLink(id, link, 'add');\r\n                });\r\n\r\n                // Event listener for deleting links\r\n                gantt.attachEvent(\"onAfterLinkDelete\", function(id, link) {\r\n                    console.log(\"Link deleted:\", id, link);\r\n                    updateLink(id, link, 'delete');\r\n                });\r\n\r\n                // Initialize DayPilot calendar\r\n                initializeDayPilotCalendar(projectId, tasks);\r\n\r\n            } catch (error) {\r\n                console.error(\"Error initializing Gantt chart for project\", projectId, \":\", error);\r\n            }\r\n        } else {\r\n            console.error(\"Gantt container not found for project:\", projectId);\r\n        }\r\n    })({{ project_info.project.id }});\r\n    {% endfor %}\r\n});\r\n\r\n// Function to initialize DayPilot calendar\r\nfunction initializeDayPilotCalendar(projectId, tasks) {\r\n    const calendarContainer = document.getElementById(\"schedule_container_\" + projectId);\r\n    if (!calendarContainer) {\r\n        console.error(\"Calendar container not found for project:\", projectId);\r\n        return;\r\n    }\r\n\r\n    const events = tasks.map(task => ({\r\n        id: task.id,\r\n        text: task.text,\r\n        start: task.start_date,\r\n        end: new Date(new Date(task.start_date).getTime() + task.duration * 60 * 60 * 1000).toISOString().slice(0, 19).replace('T', ' ')\r\n    }));\r\n\r\n    const calendar = new DayPilot.Month(calendarContainer);\r\n    calendar.startDate = new DayPilot.Date().firstDayOfMonth();\r\n    calendar.events.list = events;\r\n    calendar.init();\r\n}\r\n</script>\r\n{% endblock %}\r\n", "message_type": "text", "created_at": "2024-09-25T19:52:52.123564"}, {"sender": "assistant", "content": "It looks like you're still experiencing issues with the `Main` and `Budget` tabs not displaying correctly and the forms within them not functioning as expected. Based on the code you've provided, there are a couple of key issues:\n\n1. **Missing Context Variables for Included Templates**\n2. **Forms Not Being Processed in the Current View**\n\nI'll address each of these issues and provide solutions to help you get your tabs and forms working correctly.\n\n---\n\n## 1. Missing Context Variables for Included Templates\n\n**Problem:** When using the `{% include %}` tag in your template, you're only passing the `project` variable:\n\n```django\n{% include 'home/project_main.html' with project=project_info.project %}\n```\n\nHowever, `project_main.html` relies on additional context variables like `attachment_form`, `attachments`, `note_form`, `notes`, etc. Similarly, `budget_page.html` requires variables such as `material_form`, `materials`, `labor_form`, and `labor_entries`.\n\n**Solution:** You need to ensure that all necessary context variables are passed to the included templates. Here's how you can modify your code:\n\n### **Step 1: Update the `construction_hub` View**\n\nIn your `views.py`, update the `construction_hub` view to include the necessary context variables for each project. Modify your loop where you build `project_data` to include these variables.\n\n**Updated `construction_hub` view:**\n\n```python\ndef construction_hub(request):\n    # Set default project_type to 'construction'\n    project_type = request.GET.get('project_type', 'construction')\n\n    # Filter projects by the specified or default project type\n    projects = Project.objects.filter(project_type=project_type)\n\n    if request.method == 'POST':\n        # Handle any general POST requests here if necessary\n        pass\n\n    reference_form = ReferenceMaterialForm()\n    project_data = []\n\n    for project in projects:\n        phases = project.phases.all()\n        phase_data = []\n        total_hours = 0\n        completed_hours = 0\n        for phase in phases:\n            tasks = phase.tasks.filter(parent_task__isnull=True)\n            total_phase_tasks = phase.tasks.count()\n            completed_phase_tasks = phase.tasks.filter(status='closed').count()\n            phase_completion_percentage = (completed_phase_tasks / total_phase_tasks) * 100 if total_phase_tasks > 0 else 0\n            phase_data.append({\n                'phase': phase,\n                'tasks': tasks,\n                'completion_percentage': phase_completion_percentage\n            })\n            for task in phase.tasks.all():\n                if task.hours:\n                    total_hours += task.hours\n                    if task.status == 'closed':\n                        completed_hours += task.hours\n        remaining_hours = total_hours - completed_hours\n        completion_percentage = (completed_hours / total_hours) * 100 if total_hours > 0 else 0\n\n        # Prepare variables for project_main.html\n        notes = project.project_notes.all()\n        attachments = project.attachments.all()\n        note_form = ProjectNoteForm()\n        attachment_form = ProjectAttachmentForm()\n\n        # Prepare variables for budget_page.html\n        materials = project.materials.select_related('category')\n        labor_entries = project.labor_entries.select_related('user')\n        material_form = MaterialForm()\n        labor_form = LaborEntryForm()\n        total_material_cost = sum(m.total_cost for m in materials)\n        total_labor_cost = sum(l.total_pay for l in labor_entries)\n        total_cost = total_material_cost + total_labor_cost\n        cost_per_sqft = total_cost / project.square_footage if project.square_footage else 0\n\n        project_data.append({\n            'project': project,\n            'phases': phase_data,\n            'total_hours': total_hours,\n            'completed_hours': completed_hours,\n            'remaining_hours': remaining_hours,\n            'completion_percentage': completion_percentage,\n            # Include variables for the main tab\n            'notes': notes,\n            'attachments': attachments,\n            'note_form': note_form,\n            'attachment_form': attachment_form,\n            # Include variables for the budget tab\n            'materials': materials,\n            'labor_entries': labor_entries,\n            'material_form': material_form,\n            'labor_form': labor_form,\n            'total_material_cost': total_material_cost,\n            'total_labor_cost': total_labor_cost,\n            'total_cost': total_cost,\n            'cost_per_sqft': cost_per_sqft,\n        })\n\n    return render(request, 'home/hub.html', {\n        'project_data': project_data,\n        'reference_form': reference_form,\n        'project_type': project_type  # Pass the project_type to the template\n    })\n```\n\n### **Step 2: Update the Template to Pass Context Variables to Included Templates**\n\nModify your `home/hub.html` to pass the additional variables to the included templates.\n\n**Updated `home/hub.html`:**\n\n```django\n<!-- Main Tab Content -->\n<div class=\"tab-pane fade show active\" id=\"main-{{ project_info.project.id }}\" role=\"tabpanel\" aria-labelledby=\"main-tab-{{ project_info.project.id }}\">\n    {% include 'home/project_main.html' with\n        project=project_info.project\n        attachment_form=project_info.attachment_form\n        attachments=project_info.attachments\n        note_form=project_info.note_form\n        notes=project_info.notes %}\n</div>\n\n<!-- Budget Tab Content -->\n<div class=\"tab-pane fade\" id=\"budget-{{ project_info.project.id }}\" role=\"tabpanel\" aria-labelledby=\"budget-tab-{{ project_info.project.id }}\">\n    {% include 'home/budget_page.html' with\n        project=project_info.project\n        materials=project_info.materials\n        labor_entries=project_info.labor_entries\n        material_form=project_info.material_form\n        labor_form=project_info.labor_form\n        total_material_cost=project_info.total_material_cost\n        total_labor_cost=project_info.total_labor_cost\n        total_cost=project_info.total_cost\n        cost_per_sqft=project_info.cost_per_sqft %}\n</div>\n```\n\n---\n\n## 2. Forms Not Being Processed in the Current View\n\n**Problem:** Even after passing the necessary context variables, the forms within the `Main` and `Budget` tabs won't function because the `construction_hub` view doesn't handle their submission. When the forms are submitted, they send a POST request to the current URL (`/construction/`), but the view isn't set up to process these POST requests.\n\n**Solution:** You have two options:\n\n### **Option A: Modify the Forms to Submit to the Correct Views**\n\nChange the `action` attribute of your forms to point to the views that handle their submissions (`project_main` and `budget_page` views).\n\n**Update `project_main.html`:**\n\n```django\n<!-- Attachments Section -->\n<form method=\"post\" action=\"{% url 'project_main' project.id %}\" enctype=\"multipart/form-data\">\n    {% csrf_token %}\n    {{ attachment_form.as_p }}\n    <button type=\"submit\" name=\"add_attachment\" class=\"btn btn-primary\">Upload Attachment</button>\n</form>\n```\n\n**Update `budget_page.html`:**\n\n```django\n<!-- Materials Section -->\n<form method=\"post\" action=\"{% url 'budget_page' project.id %}\">\n    {% csrf_token %}\n    {{ material_form.as_p }}\n    <button type=\"submit\" name=\"add_material\" class=\"btn btn-primary\">Add Material</button>\n</form>\n```\n\n**Considerations:**\n\n- **Pros:** Forms will be processed by the appropriate views, ensuring that the form handling logic remains centralized.\n- **Cons:** After form submission, users will be redirected to the `project_main` or `budget_page` views, which might not be desired if you want to keep them on the hub page.\n\n### **Option B: Handle Form Submissions in the `construction_hub` View**\n\nModify your `construction_hub` view to process the forms when they are submitted.\n\n**Updated `construction_hub` view:**\n\n```python\ndef construction_hub(request):\n    # ... existing code ...\n\n    if request.method == 'POST':\n        # Determine which form was submitted\n        project_id = request.POST.get('project_id')\n        project = get_object_or_404(Project, id=project_id)\n\n        if 'add_attachment' in request.POST:\n            attachment_form = ProjectAttachmentForm(request.POST, request.FILES)\n            if attachment_form.is_valid():\n                attachment = attachment_form.save(commit=False)\n                attachment.project = project\n                attachment.uploaded_by = request.user\n                attachment.save()\n                return redirect('construction_hub')\n        elif 'add_note' in request.POST:\n            note_form = ProjectNoteForm(request.POST)\n            if note_form.is_valid():\n                note = note_form.save(commit=False)\n                note.project = project\n                note.created_by = request.user\n                note.save()\n                return redirect('construction_hub')\n        elif 'add_material' in request.POST:\n            material_form = MaterialForm(request.POST)\n            if material_form.is_valid():\n                material = material_form.save(commit=False)\n                material.project = project\n                material.save()\n                return redirect('construction_hub')\n        elif 'add_labor' in request.POST:\n            labor_form = LaborEntryForm(request.POST)\n            if labor_form.is_valid():\n                labor_entry = labor_form.save(commit=False)\n                labor_entry.project = project\n                labor_entry.save()\n                return redirect('construction_hub')\n\n    # ... rest of the code ...\n```\n\n**Update your forms to include `project_id`:**\n\n**In `project_main.html`:**\n\n```django\n<!-- Attachments Section -->\n<form method=\"post\" enctype=\"multipart/form-data\">\n    {% csrf_token %}\n    <input type=\"hidden\" name=\"project_id\" value=\"{{ project.id }}\">\n    {{ attachment_form.as_p }}\n    <button type=\"submit\" name=\"add_attachment\" class=\"btn btn-primary\">Upload Attachment</button>\n</form>\n```\n\n**In `budget_page.html`:**\n\n```django\n<!-- Materials Section -->\n<form method=\"post\">\n    {% csrf_token %}\n    <input type=\"hidden\" name=\"project_id\" value=\"{{ project.id }}\">\n    {{ material_form.as_p }}\n    <button type=\"submit\" name=\"add_material\" class=\"btn btn-primary\">Add Material</button>\n</form>\n```\n\n**Considerations:**\n\n- **Pros:** Users remain on the hub page after submitting the form.\n- **Cons:** The `construction_hub` view becomes more complex as it now needs to handle multiple forms for multiple projects.\n\n---\n\n## **Recommendation**\n\nFor maintainability and code clarity, I recommend **Option A**:\n\n- **Update the forms to submit to the appropriate views (`project_main` and `budget_page`).**\n\n- **Ensure that after processing, these views redirect back to the hub page.** You can do this by adding a `next` parameter in the URL or session.\n\nHere's how you can modify the `project_main` and `budget_page` views to redirect back to the hub after processing:\n\n**Modify `project_main` view:**\n\n```python\ndef project_main(request, project_id):\n    project = get_object_or_404(Project, id=project_id)\n    # ... existing code ...\n\n    if 'next' in request.GET:\n        return redirect(request.GET['next'])\n    else:\n        return redirect('project_main', project_id=project.id)\n```\n\n**Update the form in `project_main.html` to include the `next` parameter:**\n\n```django\n<form method=\"post\" action=\"{% url 'project_main' project.id %}?next={% url 'construction_hub' %}\" enctype=\"multipart/form-data\">\n```\n\n**Do the same for `budget_page` view and template.**\n\n---\n\n## **Summary**\n\n- **Pass all necessary context variables to included templates.**\n- **Decide whether to handle form submissions in the current view or redirect to the appropriate views.**\n\nBy ensuring that all required variables are passed to your templates and that your forms are correctly handled, your `Main` and `Budget` tabs should display the correct information, and your forms should function as intended.\n\n---\n\nIf you have any questions or need further clarification on any of these steps, feel free to ask!", "message_type": "text", "created_at": "2024-09-25T19:54:44.084588"}, {"sender": "user", "content": "its not the constcution hub view itsa the OtherProject view", "message_type": "text", "created_at": "2024-09-25T19:55:28.967181"}, {"sender": "assistant", "content": "Thank you for the clarification. I understand now that the issue is occurring in the `other_hub` view and the `OtherProjects.html` template, not in the `construction_hub` view. My apologies for any confusion.\n\nLet's adjust the previous guidance to focus on the `other_hub` view.\n\n---\n\n## **Understanding the Issue**\n\n**Problem:** The `Main` and `Budget` tabs in your `OtherProjects.html` template are not displaying correctly, and the forms within them are not functioning as expected. This is likely because the necessary context variables are not being passed from the `other_hub` view to the included templates (`project_main.html` and `budget_page.html`).\n\n---\n\n## **Solution**\n\nTo resolve this issue, we need to:\n\n1. **Pass all necessary context variables from the `other_hub` view to the templates.**\n2. **Ensure that forms in the included templates are handled correctly, either by processing form submissions in the `other_hub` view or by directing the forms to the appropriate views.**\n\n### **Step 1: Update the `other_hub` View**\n\nWe need to modify the `other_hub` view to include the necessary context variables for each project, so that when we include `project_main.html` and `budget_page.html`, they have access to the required data.\n\n**Updated `other_hub` view:**\n\n```python\ndef other_hub(request):\n    # Set default project_type to 'other'\n    project_type = request.GET.get('project_type', 'other')\n\n    # Filter projects by the specified or default project type\n    projects = Project.objects.filter(project_type=project_type)\n\n    if request.method == 'POST':\n        # You can handle form submissions here if necessary\n        pass  # We'll discuss form handling in Step 2\n\n    reference_form = ReferenceMaterialForm()\n    project_data = []\n\n    for project in projects:\n        phases = project.phases.all()\n        phase_data = []\n        total_hours = 0\n        completed_hours = 0\n        for phase in phases:\n            tasks = phase.tasks.filter(parent_task__isnull=True)\n            total_phase_tasks = phase.tasks.count()\n            completed_phase_tasks = phase.tasks.filter(status='closed').count()\n            phase_completion_percentage = (completed_phase_tasks / total_phase_tasks) * 100 if total_phase_tasks > 0 else 0\n            phase_data.append({\n                'phase': phase,\n                'tasks': tasks,\n                'completion_percentage': phase_completion_percentage\n            })\n            for task in phase.tasks.all():\n                if task.hours:\n                    total_hours += task.hours\n                    if task.status == 'closed':\n                        completed_hours += task.hours\n        remaining_hours = total_hours - completed_hours\n        completion_percentage = (completed_hours / total_hours) * 100 if total_hours > 0 else 0\n\n        # Prepare variables for project_main.html\n        notes = project.project_notes.all()\n        attachments = project.attachments.all()\n        note_form = ProjectNoteForm()\n        attachment_form = ProjectAttachmentForm()\n\n        # Prepare variables for budget_page.html\n        materials = project.materials.select_related('category')\n        labor_entries = project.labor_entries.select_related('user')\n        material_form = MaterialForm()\n        labor_form = LaborEntryForm()\n        total_material_cost = sum(m.total_cost for m in materials)\n        total_labor_cost = sum(l.total_pay for l in labor_entries)\n        total_cost = total_material_cost + total_labor_cost\n        cost_per_sqft = total_cost / project.square_footage if project.square_footage else 0\n\n        project_data.append({\n            'project': project,\n            'phases': phase_data,\n            'total_hours': total_hours,\n            'completed_hours': completed_hours,\n            'remaining_hours': remaining_hours,\n            'completion_percentage': completion_percentage,\n            # Include variables for the main tab\n            'notes': notes,\n            'attachments': attachments,\n            'note_form': note_form,\n            'attachment_form': attachment_form,\n            # Include variables for the budget tab\n            'materials': materials,\n            'labor_entries': labor_entries,\n            'material_form': material_form,\n            'labor_form': labor_form,\n            'total_material_cost': total_material_cost,\n            'total_labor_cost': total_labor_cost,\n            'total_cost': total_cost,\n            'cost_per_sqft': cost_per_sqft,\n        })\n\n    return render(request, 'home/OtherProjects.html', {\n        'project_data': project_data,\n        'reference_form': reference_form,\n        'project_type': project_type  # Pass the project_type to the template\n    })\n```\n\n### **Step 2: Update `OtherProjects.html` Template to Pass Context Variables**\n\nNow, in your template where you include `project_main.html` and `budget_page.html`, you need to pass the context variables that these templates require.\n\n**Updated `OtherProjects.html`:**\n\n```django\n<!-- Main Tab Content -->\n<div class=\"tab-pane fade show active\" id=\"main-{{ project_info.project.id }}\" role=\"tabpanel\" aria-labelledby=\"main-tab-{{ project_info.project.id }}\">\n    {% include 'home/project_main.html' with\n        project=project_info.project\n        attachment_form=project_info.attachment_form\n        attachments=project_info.attachments\n        note_form=project_info.note_form\n        notes=project_info.notes %}\n</div>\n\n<!-- Budget Tab Content -->\n<div class=\"tab-pane fade\" id=\"budget-{{ project_info.project.id }}\" role=\"tabpanel\" aria-labelledby=\"budget-tab-{{ project_info.project.id }}\">\n    {% include 'home/budget_page.html' with\n        project=project_info.project\n        materials=project_info.materials\n        labor_entries=project_info.labor_entries\n        material_form=project_info.material_form\n        labor_form=project_info.labor_form\n        total_material_cost=project_info.total_material_cost\n        total_labor_cost=project_info.total_labor_cost\n        total_cost=project_info.total_cost\n        cost_per_sqft=project_info.cost_per_sqft %}\n</div>\n```\n\nBy doing this, you're ensuring that all the variables required by the included templates are available, and your `Main` and `Budget` tabs should display the correct information.\n\n### **Step 3: Handle Form Submissions**\n\n**Option A: Adjust Forms to Submit to Appropriate Views**\n\nIf you have views specifically dedicated to processing the forms in `project_main.html` and `budget_page.html` (e.g., `project_main` and `budget_page` views), you can adjust your forms to submit to these views.\n\n**Update Forms in `project_main.html`:**\n\n```django\n<!-- Attachments Section -->\n<form method=\"post\" action=\"{% url 'project_main' project.id %}\" enctype=\"multipart/form-data\">\n    {% csrf_token %}\n    {{ attachment_form.as_p }}\n    <button type=\"submit\" name=\"add_attachment\" class=\"btn btn-primary\">Upload Attachment</button>\n</form>\n\n<!-- Notes Section -->\n<form method=\"post\" action=\"{% url 'project_main' project.id %}\">\n    {% csrf_token %}\n    {{ note_form.as_p }}\n    <button type=\"submit\" name=\"add_note\" class=\"btn btn-primary\">Add Note</button>\n</form>\n```\n\n**Update Forms in `budget_page.html`:**\n\n```django\n<!-- Materials Section -->\n<form method=\"post\" action=\"{% url 'budget_page' project.id %}\">\n    {% csrf_token %}\n    {{ material_form.as_p }}\n    <button type=\"submit\" name=\"add_material\" class=\"btn btn-primary\">Add Material</button>\n</form>\n\n<!-- Labor Section -->\n<form method=\"post\" action=\"{% url 'budget_page' project.id %}\">\n    {% csrf_token %}\n    {{ labor_form.as_p }}\n    <button type=\"submit\" name=\"add_labor\" class=\"btn btn-primary\">Add Labor Entry</button>\n</form>\n```\n\n**Note:** Ensure that your URLs are correctly configured in `urls.py` to point to these views.\n\n**Option B: Handle Form Submissions in the `other_hub` View**\n\nAlternatively, you can handle the form submissions in the `other_hub` view. This way, users can submit forms without leaving the hub page.\n\n**Updated `other_hub` View to Handle Forms:**\n\n```python\ndef other_hub(request):\n    # ... existing code ...\n\n    if request.method == 'POST':\n        project_id = request.POST.get('project_id')\n        project = get_object_or_404(Project, id=project_id)\n        \n        if 'add_attachment' in request.POST:\n            attachment_form = ProjectAttachmentForm(request.POST, request.FILES)\n            if attachment_form.is_valid():\n                attachment = attachment_form.save(commit=False)\n                attachment.project = project\n                attachment.uploaded_by = request.user\n                attachment.save()\n                return redirect('other_hub')\n        elif 'add_note' in request.POST:\n            note_form = ProjectNoteForm(request.POST)\n            if note_form.is_valid():\n                note = note_form.save(commit=False)\n                note.project = project\n                note.created_by = request.user\n                note.save()\n                return redirect('other_hub')\n        elif 'add_material' in request.POST:\n            material_form = MaterialForm(request.POST)\n            if material_form.is_valid():\n                material = material_form.save(commit=False)\n                material.project = project\n                material.save()\n                return redirect('other_hub')\n        elif 'add_labor' in request.POST:\n            labor_form = LaborEntryForm(request.POST)\n            if labor_form.is_valid():\n                labor_entry = labor_form.save(commit=False)\n                labor_entry.project = project\n                labor_entry.save()\n                return redirect('other_hub')\n        # ... handle other forms if necessary ...\n\n    # ... rest of the code ...\n```\n\n**Add `project_id` Hidden Input to Forms**\n\nIn your forms within `project_main.html` and `budget_page.html`, include a hidden input for `project_id` so that the `other_hub` view knows which project the form submission is related to.\n\n**Update Forms in `project_main.html`:**\n\n```django\n<!-- Attachments Section -->\n<form method=\"post\" enctype=\"multipart/form-data\">\n    {% csrf_token %}\n    <input type=\"hidden\" name=\"project_id\" value=\"{{ project.id }}\">\n    {{ attachment_form.as_p }}\n    <button type=\"submit\" name=\"add_attachment\" class=\"btn btn-primary\">Upload Attachment</button>\n</form>\n\n<!-- Notes Section -->\n<form method=\"post\">\n    {% csrf_token %}\n    <input type=\"hidden\" name=\"project_id\" value=\"{{ project.id }}\">\n    {{ note_form.as_p }}\n    <button type=\"submit\" name=\"add_note\" class=\"btn btn-primary\">Add Note</button>\n</form>\n```\n\n**Update Forms in `budget_page.html`:**\n\n```django\n<!-- Materials Section -->\n<form method=\"post\">\n    {% csrf_token %}\n    <input type=\"hidden\" name=\"project_id\" value=\"{{ project.id }}\">\n    {{ material_form.as_p }}\n    <button type=\"submit\" name=\"add_material\" class=\"btn btn-primary\">Add Material</button>\n</form>\n\n<!-- Labor Section -->\n<form method=\"post\">\n    {% csrf_token %}\n    <input type=\"hidden\" name=\"project_id\" value=\"{{ project.id }}\">\n    {{ labor_form.as_p }}\n    <button type=\"submit\" name=\"add_labor\" class=\"btn btn-primary\">Add Labor Entry</button>\n</form>\n```\n\nBy handling form submissions in the `other_hub` view, you allow users to submit forms without navigating away from the hub page.\n\n### **Option Considerations**\n\n- **Option A:** Directing forms to specific views (`project_main` and `budget_page`) keeps form processing logic in their respective views. However, users will navigate away from the hub page upon submission.\n- **Option B:** Handling forms in the `other_hub` view keeps users on the hub page but can make the view more complex due to handling multiple forms.\n\nChoose the option that best fits your application's design and user experience requirements.\n\n---\n\n## **Final Adjustments**\n\nEnsure that your forms have unique submit button names so that your view can determine which form was submitted.\n\nFor example:\n\n- Use `name=\"add_attachment\"` for the attachment form.\n- Use `name=\"add_note\"` for the note form.\n- Use `name=\"add_material\"` for the material form.\n- Use `name=\"add_labor\"` for the labor form.\n\nThis way, in your view, you can check which form is being submitted based on the presence of these names in `request.POST`.\n\n---\n\n## **Summary**\n\n- **Pass all necessary context variables from the `other_hub` view to `OtherProjects.html`.**\n- **Update `OtherProjects.html` to pass these variables to included templates.**\n- **Handle form submissions either in the `other_hub` view or redirect forms to appropriate views.**\n- **Ensure forms include a hidden `project_id` field to associate submissions with the correct project.**\n- **Use unique names for submit buttons to distinguish between different forms in your view.**\n\n---\n\nBy implementing these changes, your `Main` and `Budget` tabs should properly display the required information, and the forms within them should function as expected.\n\n---\n\n## **Need Further Assistance?**\n\nIf you have any questions or need further clarification on any of these steps, please let me know! I'm here to help.", "message_type": "text", "created_at": "2024-09-25T19:56:29.460069"}]}